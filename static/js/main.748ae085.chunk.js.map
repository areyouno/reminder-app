{"version":3,"sources":["components/Navigation/SideBar/SideBar.module.scss","components/UI/Input/Input.module.scss","components/NewList/NewList.module.scss","components/Reminder/Reminder.module.scss","components/Layout/Layout.module.scss","components/UI/Modal/Modal.module.scss","components/UI/Backdrop/Backdrop.module.scss","store/actions/actionTypes.js","store/actions/todoList.js","components/UI/Input/Input.js","components/NewList/NewList.js","components/Reminder/Reminder.js","components/Reminder/ReminderSearch.js","components/UI/Backdrop/Backdrop.js","components/UI/Modal/Modal.js","components/Navigation/SideBar/SideBar.js","components/Layout/Layout.js","App.js","reportWebVitals.js","store/utility.js","store/reducers/todoList.js","index.js"],"names":["module","exports","ADD_REMINDER","EDIT_REMINDER","ADD_LIST","SET_TODO_LIST","TOGGLE_COMPLETE_REMINDER","addReminder","reminder","index","type","actionTypes","reminderContent","todoListIndex","editReminder","id","flag","reminderListId","reminderId","content","toggleCompleteReminder","input","props","inputElement","inputClasses","styles","InputElement","invalid","shouldValidate","touched","push","Invalid","center","inputNewList","className","length","elementType","join","elementConfig","value","onChange","changed","options","map","option","displayValue","autoFocus","Input","Label","label","NewList","useState","text","setText","useEffect","header","newlist__header","btn","onClick","addListCancelled","disabled","addNewList","newlist__input","event","target","handleChange","connect","state","todoList","todos","dispatch","onAddReminder","actions","onEditReminder","onToggleCompleteReminder","isAdding","setIsAdding","newInputStr","setNewInputStr","reminderListCopy","setReminderListCopy","inputRef","useRef","rCopy","reminderListIndex","todoItems","current","focus","onAddBlur","sortByCompleted","sort","a","b","isCompleted","reminderHeader","Button","returnHandler","style","padding","title","reminderList","Checkbox","icon","checkedIcon","color","listId","checked","desc","reminders","pos","indexOf","onEditReminderHandler","onBlur","onSaveReminderHandler","newInput","ref","onKeyDown","keyCode","addReminderFooter","show","rList","todo","listIndex","reminderIndex","todoIndex","searchVal","backdrop","Backdrop","clicked","Modal","modalClosed","transform","opacity","children","React","memo","prevProps","nextProps","onAddList","listTitle","itemId","setItemId","inputFieldValue","setInputFieldValue","filteredReminders","setFilteredReminders","isOpen","setIsOpen","isSearching","setIsSearching","vw","Math","max","document","documentElement","clientWidth","window","innerWidth","reminderListHandler","arr","searchListHandler","toLowerCase","rows","filterKey","filter","row","JSON","stringify","includes","cancelAddListHandler","onReturnToListsHandler","modal","searchBar","sidebar__search","sidebar__icon","sidebar__searchbox","placeholder","e","onFocus","tdList","item","active","main","sidebar__label","addListFooter","sidebar__footer","sidebar__footer__btn","sidebar","Layout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","updatedObject","oldObject","updatedProperties","initialState","setToDoList","action","updatedTodos","todosCopy","updatedReminder","updatedTodoItems","splice","addList","newList","arrayCopy","reducer","actionType","store","createStore","todoReducer","__REDUX_DEVTOOLS_EXTENSION__","app","ReactDOM","render","getElementById","console","log"],"mappings":"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","file":"static/js/main.748ae085.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"SideBar_sidebar__1oR41\",\"sidebar__search\":\"SideBar_sidebar__search__3mwSc\",\"sidebar__icon\":\"SideBar_sidebar__icon__17wFG\",\"sidebar__searchbox\":\"SideBar_sidebar__searchbox__3E6tE\",\"searchbox--active\":\"SideBar_searchbox--active__3ktu_\",\"sidebar__cancel-button\":\"SideBar_sidebar__cancel-button__3ahLX\",\"sidebar__cancel-button--show\":\"SideBar_sidebar__cancel-button--show__NK5y3\",\"sidebar__list\":\"SideBar_sidebar__list__1WiYj\",\"sidebar__list-item\":\"SideBar_sidebar__list-item__27jhN\",\"active\":\"SideBar_active__oBwRT\",\"sidebar__list-item-count\":\"SideBar_sidebar__list-item-count__1T-T0\",\"sidebar__label\":\"SideBar_sidebar__label__2uL6l\",\"sidebar__footer\":\"SideBar_sidebar__footer__3lBUs\",\"sidebar__footer__btn\":\"SideBar_sidebar__footer__btn__3xEB_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2YNEl\",\"Label\":\"Input_Label__MYFf_\",\"InputElement\":\"Input_InputElement__3HLo_\",\"Invalid\":\"Input_Invalid__NcZ9P\",\"inputNewList\":\"Input_inputNewList__us4dW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newlist__header\":\"NewList_newlist__header__32R8A\",\"newlist__input\":\"NewList_newlist__input__2cqRm\",\"btn\":\"NewList_btn__1KO7v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"reminder\":\"Reminder_reminder__vKArV\",\"container--show\":\"Reminder_container--show__2mBzT\",\"reminder-btn-return\":\"Reminder_reminder-btn-return__2oZi8\",\"reminder__todo-title\":\"Reminder_reminder__todo-title__YMBHi\",\"reminder__no-reminder\":\"Reminder_reminder__no-reminder__1YhNS\",\"reminder__row-container\":\"Reminder_reminder__row-container__5qad3\",\"reminder__btn-radio-container\":\"Reminder_reminder__btn-radio-container__3Zefk\",\"reminder__btn-radio\":\"Reminder_reminder__btn-radio__11VZl\",\"reminder__btn-radio--hide\":\"Reminder_reminder__btn-radio--hide__1wuCk\",\"reminder__reminder-row\":\"Reminder_reminder__reminder-row__3YiAR\",\"reminder__reminder-row--hide\":\"Reminder_reminder__reminder-row--hide__2CteO\",\"reminder__reminder-item\":\"Reminder_reminder__reminder-item__2bDQT\",\"reminder__reminder-item--completed\":\"Reminder_reminder__reminder-item--completed__3fG6W\",\"reminder__footer\":\"Reminder_reminder__footer__2DvZy\",\"reminder__footer-btn-add\":\"Reminder_reminder__footer-btn-add__3j4Yc\",\"reminder__container-search\":\"Reminder_reminder__container-search__3ExAo\",\"reminder__container-search-item\":\"Reminder_reminder__container-search-item__1ho7M\",\"container-header\":\"Reminder_container-header__OKqnR\",\"container-btn-navigate-before\":\"Reminder_container-btn-navigate-before__3UWHR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__34mI9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__1-16l\",\"Loading\":\"Modal_Loading__xPea8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__2cpYd\"};","export const ADD_REMINDER = 'ADD_REMINDER';\r\nexport const EDIT_REMINDER = 'EDIT_REMINDER';\r\nexport const REMOVE_REMINDER = 'REMOVE_REMINDER';\r\nexport const ADD_LIST = 'ADD_LIST';\r\nexport const SET_TODO_LIST = 'SET_TODO_LIST';\r\nexport const TOGGLE_COMPLETE_REMINDER = 'TOGGLE_COMPLETE_REMINDER';\r\n","import * as actionTypes from './actionTypes';\r\n\r\nexport const addReminder = (reminder, index) => {\r\n       return {\r\n              type: actionTypes.ADD_REMINDER,\r\n              reminderContent: reminder,\r\n              todoListIndex: index\r\n       };\r\n};\r\n\r\n//1st approach: pass entire reminders list\r\n// export const editReminder = (reminders, index) => {\r\n//        return {\r\n//               type: actionTypes.EDIT_REMINDER,\r\n//               listIndex: index,\r\n//               todoItems: reminders\r\n//        };\r\n// };\r\n\r\n//2nd approach pass flag, edit or remove\r\nexport const editReminder = (id, flag, reminder, reminderListId) => {\r\n       return {\r\n              type: actionTypes.EDIT_REMINDER,\r\n              reminderListId: reminderListId,\r\n              reminderId: id,\r\n              content: reminder,\r\n              flag: flag\r\n       };\r\n};\r\n\r\nexport const removeReminder = index => {\r\n       return {\r\n              type: actionTypes.REMOVE_REMINDER,\r\n              reminderIndex: index\r\n       };\r\n};\r\n\r\nexport const addList = title => {\r\n       return {\r\n              type: actionTypes.ADD_LIST,\r\n              listTitle: title\r\n       };\r\n};\r\n\r\nexport const toggleCompleteReminder = (id, reminderListId) => {\r\n       return {\r\n              type: actionTypes.TOGGLE_COMPLETE_REMINDER,\r\n              id: id,\r\n              reminderListId: reminderListId\r\n       };\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./Input.module.scss\";\r\n\r\nconst input = props => {\r\n       let inputElement = null;\r\n       const inputClasses = [styles.InputElement];\r\n\r\n       if (props.invalid && props.shouldValidate && props.touched) {\r\n              inputClasses.push(styles.Invalid);\r\n       }\r\n\r\n       if (props.center) {\r\n              inputClasses.push(styles.inputNewList);\r\n       }\r\n\r\n       if (props.className) {\r\n              inputClasses.length = 0;\r\n              inputClasses.push(props.className);\r\n       }\r\n\r\n       switch (props.elementType) {\r\n              case \"input\":\r\n                     inputElement = (\r\n                            <input\r\n                                   className={inputClasses.join(\" \")}\r\n                                   {...props.elementConfig}\r\n                                   value={props.value}\r\n                                   onChange={props.changed}\r\n                            />\r\n                     );\r\n                     break;\r\n              case \"textarea\":\r\n                     inputElement = (\r\n                            <textarea\r\n                                   className={inputClasses.join(\" \")}\r\n                                   {...props.elementConfig}\r\n                                   value={props.value}\r\n                                   onChange={props.changed}\r\n                            />\r\n                     );\r\n                     break;\r\n              case \"select\":\r\n                     inputElement = (\r\n                            <select className={inputClasses.join(\" \")} value={props.value} onChange={props.changed}>\r\n                                   {props.elementConfig.options.map(option => (\r\n                                          <option key={option.value} value={option.value}>\r\n                                                 {option.displayValue}\r\n                                          </option>\r\n                                   ))}\r\n                            </select>\r\n                     );\r\n                     break;\r\n              default:\r\n                     inputElement = (\r\n                            <input\r\n                                   autoFocus\r\n                                   className={inputClasses.join(\" \")}\r\n                                   {...props.elementConfig}\r\n                                   value={props.value}\r\n                                   onChange={props.changed}\r\n                            />\r\n                     );\r\n       }\r\n\r\n       return (\r\n              <div className={styles.Input}>\r\n                     <label className={styles.Label}>{props.label}</label>\r\n                     {inputElement}\r\n              </div>\r\n       );\r\n};\r\n\r\nexport default input;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Input from \"../UI/Input/Input\";\r\nimport styles from \"./NewList.module.scss\";\r\n\r\nconst NewList = props => {\r\n       const [text, setText] = useState(\"\");\r\n\r\n       useEffect(() => {\r\n              return () => {\r\n                     setText(\"\");\r\n              };\r\n       }, []);\r\n\r\n       const handleChange = event => {\r\n              // event.preventDefault();\r\n              setText(event.target.value);\r\n       };\r\n\r\n       let header = (\r\n              <div className={styles.newlist__header}>\r\n                     <button className={styles.btn} onClick={props.addListCancelled}>\r\n                            Cancel\r\n                     </button>\r\n                     <div>New List</div>\r\n                     <button className={styles.btn} disabled={!text} onClick={() => props.addNewList(text)}>\r\n                            Done\r\n                     </button>\r\n              </div>\r\n       );\r\n\r\n       let input = (\r\n              <div className={styles.newlist__input}>\r\n                     <p>Icon</p>\r\n                     <Input value={text} changed={event => handleChange(event)} center=\"true\" />\r\n              </div>\r\n       );\r\n\r\n       return (\r\n              <div>\r\n                     {header}\r\n                     {input}\r\n              </div>\r\n       );\r\n};\r\n\r\nexport default NewList;\r\n","import Button from \"@material-ui/core/Button\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\r\nimport RadioButtonChecked from \"@material-ui/icons/RadioButtonChecked\";\r\nimport CircleUnchecked from \"@material-ui/icons/RadioButtonUnchecked\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport styles from \"./Reminder.module.scss\";\r\n\r\nconst Reminder = props => {\r\n       const [isAdding, setIsAdding] = useState(false);\r\n       const [newInputStr, setNewInputStr] = useState(\"\");\r\n       const [reminderListCopy, setReminderListCopy] = useState([]);\r\n\r\n       let inputRef = useRef();\r\n\r\n       useEffect(() => {\r\n              let rCopy = null;\r\n              rCopy = [...props.todoList[props.reminderListIndex].todoItems];\r\n\r\n              setReminderListCopy(rCopy);\r\n       }, [props.todoList, props.reminderListIndex]); //to remove props.todoList (or not)\r\n\r\n       useEffect(() => {\r\n              if (inputRef && isAdding) {\r\n                     inputRef.current.focus();\r\n              }\r\n       });\r\n\r\n       const onAddBlur = event => {\r\n              setIsAdding(false);\r\n              setNewInputStr(\"\");\r\n              if (event.target.value === \"\") {\r\n                     return;\r\n              }\r\n              props.onAddReminder(event.target.value, props.reminderListIndex);\r\n       };\r\n\r\n       const newInputHandler = () => {\r\n              setIsAdding(true);\r\n              //if newinputField exists, dont allow new reminder to be clicked\r\n       };\r\n\r\n       const onEditReminderHandler = (id, event) => {\r\n              let reminders = [...reminderListCopy];\r\n              //look for index\r\n              let pos = reminders.map(reminder => reminder.id).indexOf(id);\r\n              reminders[pos].desc = event.target.value;\r\n              setReminderListCopy(reminders); //update state copy\r\n       };\r\n\r\n       const onSaveReminderHandler = (id, event) => {\r\n              if (event.target.value === \"\") {\r\n                     props.onEditReminder(id, \"remove\", null, props.reminderListIndex);\r\n                     return;\r\n              }\r\n              props.onEditReminder(id, \"edit\", event.target.value, props.reminderListIndex);\r\n       };\r\n\r\n       const onToggleCheckboxHandler = (id, listId) => {\r\n              props.onToggleCompleteReminder(id, listId);\r\n       };\r\n\r\n       const onKeypressHandler = event => {\r\n              if (event.keyCode === 13) {\r\n                     onAddBlur(event);\r\n              }\r\n       };\r\n\r\n       const sortByCompleted = reminderListCopy.sort((a, b) => {\r\n              if (a.isCompleted && !b.isCompleted) {\r\n                     return 1;\r\n              } else if (!a.isCompleted && b.isCompleted) {\r\n                     return -1;\r\n              } else {\r\n                     return 0;\r\n              }\r\n       });\r\n\r\n       let reminderHeader = (\r\n              <>\r\n                     <div className={styles[\"reminder-btn-return\"]}>\r\n                            <Button onClick={props.returnHandler} style={{ padding: \"6px 8px 6px 0px\" }}>\r\n                                   <NavigateBeforeIcon />\r\n                                   Lists\r\n                            </Button>\r\n                     </div>\r\n                     <h2 className={styles[\"reminder__todo-title\"]}>{props.todoList[props.reminderListIndex].title}</h2>\r\n              </>\r\n       );\r\n\r\n       let reminderList = <div className={styles[\"reminder__no-reminder\"]}>No Reminders</div>;\r\n       if (props.todoList[props.reminderListIndex].todoItems.length > 0) {\r\n              // let reminders = reminderListCopy;\r\n              let reminders = sortByCompleted;\r\n              reminderList = reminders.map((reminder, index) => {\r\n                     return (\r\n                            <div key={index} className={styles[\"reminder__row-container\"]}>\r\n                                   <div className={styles[\"reminder__btn-radio-container\"]}>\r\n                                          <Checkbox\r\n                                                 icon={<CircleUnchecked />}\r\n                                                 checkedIcon={<RadioButtonChecked />}\r\n                                                 color=\"default\"\r\n                                                 onClick={() =>\r\n                                                        onToggleCheckboxHandler(reminder.id, props.reminderListIndex)\r\n                                                 }\r\n                                                 checked={reminder.isCompleted}\r\n                                                 className={styles[\"reminder__btn-radio\"]}\r\n                                          />\r\n                                   </div>\r\n                                   <div className={styles[\"reminder__reminder-row\"]} key={index}>\r\n                                          <input\r\n                                                 className={`${styles[\"reminder__reminder-item\"]} ${\r\n                                                        reminder.isCompleted === true\r\n                                                               ? styles[\"reminder__reminder-item--completed\"]\r\n                                                               : \"\"\r\n                                                 }`}\r\n                                                 type=\"text\"\r\n                                                 id={reminder.id}\r\n                                                 value={reminder.desc}\r\n                                                 onChange={event => onEditReminderHandler(reminder.id, event)}\r\n                                                 onBlur={event => onSaveReminderHandler(reminder.id, event)}\r\n                                          />\r\n                                   </div>\r\n                            </div>\r\n                     );\r\n              });\r\n       }\r\n\r\n       let newInput = (\r\n              <div className={styles[\"reminder__row-container\"]}>\r\n                     <Checkbox\r\n                            icon={<CircleUnchecked />}\r\n                            checkedIcon={<RadioButtonChecked />}\r\n                            color=\"default\"\r\n                            checked={false}\r\n                            className={isAdding ? styles[\"reminder__btn-radio\"] : styles[\"reminder__btn-radio--hide\"]}\r\n                     />\r\n                     <div\r\n                            className={\r\n                                   isAdding ? styles[\"reminder__reminder-row\"] : styles[\"reminder__reminder-row--hide\"]\r\n                            }>\r\n                            <input\r\n                                   className={styles[\"reminder__reminder-item\"]}\r\n                                   value={newInputStr}\r\n                                   onChange={event => setNewInputStr(event.target.value)}\r\n                                   onBlur={event => onAddBlur(event)}\r\n                                   ref={inputRef}\r\n                                   onKeyDown={onKeypressHandler}\r\n                            />\r\n                     </div>\r\n              </div>\r\n       );\r\n\r\n       const addReminderFooter = (\r\n              <div className={styles[\"reminder__footer\"]}>\r\n                     <button\r\n                            className={styles[\"reminder__footer-btn-add\"]}\r\n                            disabled={isAdding}\r\n                            onClick={newInputHandler}>\r\n                            New Reminder\r\n                     </button>\r\n              </div>\r\n       );\r\n\r\n       return (\r\n              <div className={`${styles.reminder} ${props.show ? styles[\"container--show\"] : \"\"}`}>\r\n                     {reminderHeader}\r\n                     {reminderList}\r\n                     {newInput}\r\n                     {addReminderFooter}\r\n              </div>\r\n       );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n       return {\r\n              todoList: state.todos\r\n       };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n       return {\r\n              onAddReminder: (reminder, index) => dispatch(actions.addReminder(reminder, index)),\r\n              onEditReminder: (id, flag, reminder, reminderListId) =>\r\n                     dispatch(actions.editReminder(id, flag, reminder, reminderListId)),\r\n              onToggleCompleteReminder: (id, reminderListId) =>\r\n                     dispatch(actions.toggleCompleteReminder(id, reminderListId))\r\n       };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Reminder);\r\n","import Checkbox from \"@material-ui/core/Checkbox\";\r\nimport RadioButtonChecked from \"@material-ui/icons/RadioButtonChecked\";\r\nimport CircleUnchecked from \"@material-ui/icons/RadioButtonUnchecked\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport styles from \"./Reminder.module.scss\";\r\n\r\nconst ReminderSearch = props => {\r\n       const [reminderListCopy, setReminderListCopy] = useState([]);\r\n\r\n       useEffect(() => {\r\n              let rCopy = [...props.rList];\r\n              setReminderListCopy(rCopy);\r\n       }, [props.rList]); //to remove props.todoList (or not)\r\n\r\n       const onEditReminderHandler = (reminderId, event, todoIndex) => {\r\n              // console.log(\"reminderList\", reminderListCopy);\r\n              // console.log(\"id\", reminderId, \"todoIndex\", todoIndex);\r\n              let reminders = [...reminderListCopy];\r\n              const selected = reminders[todoIndex].todoItems;\r\n              let pos = selected.map(reminder => reminder.id).indexOf(reminderId);\r\n              // console.log(\"pos\", pos);\r\n              reminders[todoIndex].todoItems[pos].desc = event.target.value;\r\n              setReminderListCopy(reminders); //update state copy\r\n       };\r\n\r\n       const onSaveReminderHandler = (id, event, todoIndex) => {\r\n              //2nd approach: send todoItemIndex, flag, and depending on the flag(edit or remove) will pass the value;\r\n              if (event.target.value === \"\") {\r\n                     props.onEditReminder(id, \"remove\", null, todoIndex);\r\n                     return;\r\n              }\r\n              props.onEditReminder(id, \"edit\", event.target.value, todoIndex);\r\n       };\r\n\r\n       const onToggleCheckboxHandler = (id, listId) => {\r\n              props.onToggleCompleteReminder(id, listId);\r\n       };\r\n\r\n       const sortByCompleted = reminderListCopy.sort((a, b) => {\r\n              if (a.isCompleted && !b.isCompleted) {\r\n                     return 1;\r\n              } else if (!a.isCompleted && b.isCompleted) {\r\n                     return -1;\r\n              } else {\r\n                     return 0;\r\n              }\r\n       });\r\n\r\n       let reminderList = <div></div>;\r\n       if (reminderListCopy.length > 0) {\r\n              let reminders = sortByCompleted;\r\n              // console.log(reminders);\r\n              reminderList = reminders.map((todo, listIndex) => {\r\n                     return (\r\n                            <div key={listIndex} className={`${styles[\"reminder__container-search-item\"]}`}>\r\n                                   <h2 className={styles[\"reminder__todo-title\"]}>{todo.title}</h2>\r\n                                   {todo.todoItems.map((reminder, reminderIndex) => {\r\n                                          return (\r\n                                                 <div key={reminderIndex} className={styles[\"reminder__row-container\"]}>\r\n                                                        <div className={styles[\"reminder__btn-radio-container\"]}>\r\n                                                               <Checkbox\r\n                                                                      icon={<CircleUnchecked />}\r\n                                                                      checkedIcon={<RadioButtonChecked />}\r\n                                                                      color=\"default\"\r\n                                                                      onClick={() =>\r\n                                                                             onToggleCheckboxHandler(\r\n                                                                                    reminder.id,\r\n                                                                                    listIndex\r\n                                                                             )\r\n                                                                      }\r\n                                                                      checked={reminder.isCompleted}\r\n                                                                      className={styles[\"reminder__btn-radio\"]}\r\n                                                               />\r\n                                                        </div>\r\n                                                        <div\r\n                                                               className={styles[\"reminder__reminder-row\"]}\r\n                                                               key={listIndex}>\r\n                                                               <input\r\n                                                                      className={`${\r\n                                                                             styles[\"reminder__reminder-item\"]\r\n                                                                      } ${\r\n                                                                             reminder.isCompleted === true\r\n                                                                                    ? styles[\r\n                                                                                             \"reminder__reminder-item--completed\"\r\n                                                                                      ]\r\n                                                                                    : \"\"\r\n                                                                      }`}\r\n                                                                      type=\"text\"\r\n                                                                      id={reminderIndex}\r\n                                                                      value={reminder.desc}\r\n                                                                      onChange={event =>\r\n                                                                             onEditReminderHandler(\r\n                                                                                    reminder.id,\r\n                                                                                    event,\r\n                                                                                    listIndex\r\n                                                                             )\r\n                                                                      }\r\n                                                                      onBlur={event =>\r\n                                                                             onSaveReminderHandler(\r\n                                                                                    reminder.id,\r\n                                                                                    event,\r\n                                                                                    listIndex\r\n                                                                             )\r\n                                                                      }\r\n                                                               />\r\n                                                        </div>\r\n                                                 </div>\r\n                                          );\r\n                                   })}\r\n                            </div>\r\n                     );\r\n              });\r\n       }\r\n\r\n       return (\r\n              <div className={styles[\"reminder__container-search\"]}>\r\n                     <h1 className={styles[\"container-header\"]}>Results for \"{props.searchVal}\"</h1>\r\n                     {reminderList}\r\n              </div>\r\n       );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n       return {\r\n              todoList: state.todos\r\n       };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n       return {\r\n              onAddReminder: (reminder, index) => dispatch(actions.addReminder(reminder, index)),\r\n              onEditReminder: (id, flag, reminder, reminderListId) =>\r\n                     dispatch(actions.editReminder(id, flag, reminder, reminderListId)),\r\n              onToggleCompleteReminder: (id, reminderListId) =>\r\n                     dispatch(actions.toggleCompleteReminder(id, reminderListId))\r\n       };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReminderSearch);\r\n","import React from \"react\";\r\nimport styles from \"./Backdrop.module.scss\";\r\n\r\nconst backdrop = props => (props.show ? <div className={styles.Backdrop} onClick={props.clicked}></div> : null);\r\n\r\nexport default backdrop;\r\n","import React from \"react\";\r\nimport styles from \"./Modal.module.scss\";\r\nimport Backdrop from \"../Backdrop/Backdrop\";\r\n\r\nconst Modal = props => {\r\n       // shouldComponentUpdate(nextProps, nextState) {\r\n       //        return nextProps.show !== this.props.show || nextProps.children !== this.props.children;\r\n       // }\r\n\r\n       return (\r\n              <>\r\n                     <Backdrop show={props.show} clicked={props.modalClosed} />\r\n                     <div\r\n                            className={styles.Modal}\r\n                            //  {classNames({\r\n                            //         [styles['Modal']]: true,\r\n                            //         [styles['Loading']]: props.loading\r\n                            //  })}\r\n                            style={{\r\n                                   transform: props.show ? \"translate(calc(50vw - 50%))\" : \"translateY(-100vh)\",\r\n                                   opacity: props.show ? \"1\" : \"0\"\r\n                            }}>\r\n                            {props.children}\r\n                     </div>\r\n              </>\r\n       );\r\n};\r\n\r\nexport default React.memo(\r\n       Modal,\r\n       (prevProps, nextProps) => nextProps.show === prevProps.show && nextProps.children === prevProps.children\r\n);\r\n","import NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\nimport { FaSearch } from \"react-icons/fa\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../store/actions/index\";\r\nimport NewList from \"../../NewList/NewList\";\r\nimport Reminder from \"../../Reminder/Reminder\";\r\nimport ReminderSearch from \"../../Reminder/ReminderSearch\";\r\nimport Modal from \"../../UI/Modal/Modal\";\r\nimport styles from \"./SideBar.module.scss\";\r\n\r\nconst SideBar = props => {\r\n       const [itemId, setItemId] = useState(0);\r\n       const [isAdding, setIsAdding] = useState(false);\r\n       const [inputFieldValue, setInputFieldValue] = useState(\"\");\r\n       const [filteredReminders, setFilteredReminders] = useState([]);\r\n       const [isOpen, setIsOpen] = useState(false);\r\n       const [isSearching, setIsSearching] = useState(false);\r\n\r\n       let vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);\r\n\r\n       useEffect(() => {\r\n              reminderListHandler();\r\n       }, [inputFieldValue, itemId]);\r\n\r\n       const onTodoClickHandler = id => {\r\n              setItemId(id);\r\n              reminderListHandler(id);\r\n              setIsOpen(true);\r\n       };\r\n\r\n       const reminderListHandler = id => {\r\n              if (inputFieldValue) {\r\n                     let arr = searchListHandler(props.todoList, inputFieldValue.toLowerCase());\r\n                     setFilteredReminders(arr);\r\n              }\r\n              // console.log(filteredReminders); //always delay to reflect current vlaue; would reflect on next batch update\r\n       };\r\n\r\n       const searchListHandler = (rows, filterKey) => {\r\n              return rows.filter(row => JSON.stringify(row).toLowerCase().includes(filterKey));\r\n       };\r\n\r\n       const showAddListHandler = () => {\r\n              setIsAdding(true);\r\n       };\r\n\r\n       const cancelAddListHandler = () => {\r\n              setIsAdding(false);\r\n       };\r\n\r\n       const addListHandler = text => {\r\n              props.onAddList(text);\r\n              setIsAdding(false);\r\n       };\r\n\r\n       const onReturnToListsHandler = () => {\r\n              setIsOpen(false);\r\n       };\r\n\r\n       const clearInput = () => {\r\n              setIsSearching(!isSearching);\r\n              setInputFieldValue(\"\");\r\n       };\r\n\r\n       const inputBlurHandler = () => {\r\n              if (inputFieldValue === \"\") {\r\n                     setIsSearching(!isSearching);\r\n              }\r\n       };\r\n\r\n       const modal = (\r\n              <Modal show={isAdding} modalClosed={cancelAddListHandler}>\r\n                     <NewList addListCancelled={cancelAddListHandler} addNewList={addListHandler} />\r\n              </Modal>\r\n       );\r\n\r\n       const searchBar = (\r\n              <div className={styles.sidebar__search}>\r\n                     <FaSearch className={styles.sidebar__icon}></FaSearch>\r\n                     <input\r\n                            className={`${styles.sidebar__searchbox} ${isSearching ? styles[\"searchbox--active\"] : \"\"}`}\r\n                            placeholder=\"Search\"\r\n                            value={inputFieldValue}\r\n                            onChange={e => setInputFieldValue(e.target.value)}\r\n                            onFocus={() => setIsSearching(!isSearching)}\r\n                            onBlur={() => inputBlurHandler()}\r\n                     />\r\n                     <button\r\n                            className={`${styles[\"sidebar__cancel-button\"]} ${\r\n                                   isSearching ? styles[\"sidebar__cancel-button--show\"] : \"\"\r\n                            }`}\r\n                            onClick={() => clearInput()}>\r\n                            Cancel\r\n                     </button>\r\n              </div>\r\n       );\r\n\r\n       const tdList = props.todoList.map((item, index) => {\r\n              return (\r\n                     <div\r\n                            key={index}\r\n                            className={`${styles[\"sidebar__list-item\"]} ${index === itemId ? styles.active : \"\"}`}\r\n                            onClick={() => onTodoClickHandler(index)}>\r\n                            <div>{item.title}</div>\r\n                            <div className={styles[\"sidebar__list-item-count\"]}>{item.todoItems.length}</div>\r\n                            <NavigateNextIcon />\r\n                     </div>\r\n              );\r\n       });\r\n\r\n       let reminders = <Reminder reminderListIndex={itemId} show={isOpen} returnHandler={onReturnToListsHandler} />;\r\n       if (inputFieldValue) {\r\n              reminders = (\r\n                     <ReminderSearch\r\n                            rList={filteredReminders}\r\n                            searchVal={inputFieldValue}\r\n                            show={isOpen}\r\n                            returnHandler={onReturnToListsHandler}\r\n                     />\r\n              );\r\n       }\r\n\r\n       let main = (\r\n              <div className={styles[\"sidebar__list\"]}>\r\n                     <h3 className={styles.sidebar__label}>My Lists</h3>\r\n                     {tdList}\r\n              </div>\r\n       );\r\n       if (inputFieldValue && vw < 500) {\r\n              main = <div>{reminders}</div>;\r\n       }\r\n\r\n       const addListFooter = (\r\n              <div className={styles.sidebar__footer}>\r\n                     <button className={styles.sidebar__footer__btn} onClick={showAddListHandler}>\r\n                            Add List\r\n                     </button>\r\n              </div>\r\n       );\r\n\r\n       return (\r\n              <Fragment>\r\n                     {isAdding ? modal : null}\r\n                     <div className={styles.sidebar}>\r\n                            {searchBar}\r\n                            {main}\r\n                     </div>\r\n                     {addListFooter}\r\n                     {inputFieldValue && vw < 500 ? null : reminders}\r\n              </Fragment>\r\n       );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n       return {\r\n              todoList: state.todos\r\n       };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n       return {\r\n              onAddList: title => dispatch(actions.addList(title))\r\n       };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SideBar);\r\n","import React from \"react\";\r\nimport styles from \"./Layout.module.scss\";\r\n\r\nimport SideBar from \"../Navigation/SideBar/SideBar\";\r\n\r\nconst Layout = props => {\r\n       return (\r\n              <div className={styles.Layout}>\r\n                     <SideBar></SideBar>\r\n              </div>\r\n       );\r\n};\r\n\r\nexport default Layout;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport Layout from \"./components/Layout/Layout\";\n\nconst App = props => {\n       return (\n              <div className=\"App\">\n                     <Layout />\n              </div>\n       );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const updatedObject = (oldObject, updatedProperties) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedProperties\r\n  };\r\n};\r\n","import * as actionType from \"../actions/actionTypes\";\r\nimport { updatedObject } from \"../utility\";\r\n\r\nconst initialState = {\r\n       todos: [\r\n              {\r\n                     title: \"monday\",\r\n                     todoItems: [\r\n                            { id: 1, desc: \"exercise\", isCompleted: false },\r\n                            { id: 2, desc: \"go to bank\", isCompleted: false },\r\n                            { id: 3, desc: \"prepare clothes for laundry\", isCompleted: true }\r\n                     ]\r\n              },\r\n              {\r\n                     title: \"app ideas\",\r\n                     todoItems: [{ id: 1, desc: \"gps tracker\", isCompleted: false }]\r\n              },\r\n              {\r\n                     title: \"groceries\",\r\n                     todoItems: [\r\n                            { id: 1, desc: \"apple\", isCompleted: false },\r\n                            { id: 2, desc: \"bread\", isCompleted: false },\r\n                            { id: 3, desc: \"yoghurt\", isCompleted: false }\r\n                     ]\r\n              },\r\n              {\r\n                     title: \"app ideas\",\r\n                     todoItems: [{ id: 1, desc: \"gps tracker\", isCompleted: false }]\r\n              },\r\n              {\r\n                     title: \"groceries\",\r\n                     todoItems: [\r\n                            { id: 1, desc: \"apple\", isCompleted: false },\r\n                            { id: 2, desc: \"bread\", isCompleted: false },\r\n                            { id: 3, desc: \"yoghurt\", isCompleted: false }\r\n                     ]\r\n              },\r\n              {\r\n                     title: \"app ideas\",\r\n                     todoItems: [{ id: 1, desc: \"gps tracker\", isCompleted: false }]\r\n              },\r\n              {\r\n                     title: \"groceries\",\r\n                     todoItems: [\r\n                            { id: 1, desc: \"apple\", isCompleted: false },\r\n                            { id: 2, desc: \"bread\", isCompleted: false },\r\n                            { id: 3, desc: \"yoghurt\", isCompleted: false }\r\n                     ]\r\n              },\r\n              {\r\n                     title: \"app ideas\",\r\n                     todoItems: [{ id: 1, desc: \"gps tracker\", isCompleted: false }]\r\n              },\r\n              {\r\n                     title: \"groceries\",\r\n                     todoItems: [\r\n                            { id: 1, desc: \"apple\", isCompleted: false },\r\n                            { id: 2, desc: \"bread\", isCompleted: false },\r\n                            { id: 3, desc: \"yoghurt\", isCompleted: false }\r\n                     ]\r\n              },\r\n              {\r\n                     title: \"app ideas\",\r\n                     todoItems: [{ id: 1, desc: \"gps tracker\", isCompleted: false }]\r\n              },\r\n              {\r\n                     title: \"groceries\",\r\n                     todoItems: [\r\n                            { id: 1, desc: \"apple\", isCompleted: false },\r\n                            { id: 2, desc: \"bread\", isCompleted: false },\r\n                            { id: 3, desc: \"yoghurt\", isCompleted: false }\r\n                     ]\r\n              },\r\n              {\r\n                     title: \"app ideas\",\r\n                     todoItems: [{ id: 1, desc: \"gps tracker\", isCompleted: false }]\r\n              },\r\n              {\r\n                     title: \"groceries\",\r\n                     todoItems: [\r\n                            { id: 1, desc: \"apple\", isCompleted: false },\r\n                            { id: 2, desc: \"bread\", isCompleted: false },\r\n                            { id: 3, desc: \"yoghurt\", isCompleted: false }\r\n                     ]\r\n              },\r\n              {\r\n                     title: \"app ideas\",\r\n                     todoItems: [{ id: 1, desc: \"gps tracker\", isCompleted: false }]\r\n              },\r\n              {\r\n                     title: \"groceries\",\r\n                     todoItems: [\r\n                            { id: 1, desc: \"apple\", isCompleted: false },\r\n                            { id: 2, desc: \"bread\", isCompleted: false },\r\n                            { id: 3, desc: \"yoghurt\", isCompleted: false }\r\n                     ]\r\n              },\r\n              {\r\n                     title: \"app ideas\",\r\n                     todoItems: [{ id: 1, desc: \"gps tracker\", isCompleted: false }]\r\n              },\r\n              {\r\n                     title: \"groceries\",\r\n                     todoItems: [\r\n                            { id: 1, desc: \"apple\", isCompleted: false },\r\n                            { id: 2, desc: \"bread\", isCompleted: false },\r\n                            { id: 3, desc: \"yoghurt\", isCompleted: false }\r\n                     ]\r\n              }\r\n       ]\r\n};\r\nconst setToDoList = (state, action) => {\r\n       return updatedObject(state, {\r\n              todoList: {\r\n                     title: action.todoList.title,\r\n                     todos: action.todoList\r\n              }\r\n       });\r\n};\r\n\r\nconst addReminder = (state, action) => {\r\n       let updatedTodos = state.todos.map((arr, index) => {\r\n              if (index === action.todoListIndex) {\r\n                     let item = { desc: action.reminderContent, isCompleted: false };\r\n                     arr.todoItems.push(item);\r\n              }\r\n              return arr;\r\n       });\r\n\r\n       const updatedState = {\r\n              todos: updatedTodos\r\n       };\r\n       return updatedObject(state, updatedState);\r\n};\r\n\r\nconst editReminder = (state, action) => {\r\n       //1st approach\r\n       // const todosCopy = [...state.todos];\r\n       // let updatedReminder = { ...todosCopy[action.reminderListId] };\r\n       // let updatedTodoItems = [...updatedReminder.todoItems];\r\n       // updatedTodoItems = action.todoItems;\r\n       // updatedReminder.todoItems = updatedTodoItems;\r\n       // todosCopy[action.reminderListId] = updatedReminder;\r\n       // const updatedState = { todos: todosCopy };\r\n\r\n       //2nd approach\r\n       const todosCopy = [...state.todos];\r\n       let updatedReminder = { ...todosCopy[action.reminderListId] };\r\n       let updatedTodoItems = [...updatedReminder.todoItems];\r\n       if (action.flag === \"remove\") {\r\n              let pos = updatedTodoItems.map(reminder => reminder.id).indexOf(action.reminderId);\r\n              updatedTodoItems.splice(pos, 1);\r\n       } else if (action.flag === \"edit\") {\r\n              let updatedReminder = { ...updatedTodoItems[action.reminderId - 1] };\r\n              updatedReminder.desc = action.content;\r\n              updatedTodoItems.splice(action.reminderId - 1, 1, updatedReminder);\r\n       }\r\n       updatedReminder.todoItems = updatedTodoItems;\r\n       todosCopy[action.reminderListId] = updatedReminder;\r\n       const updatedState = { todos: todosCopy };\r\n       return updatedObject(state, updatedState);\r\n};\r\n\r\nconst addList = (state, action) => {\r\n       const newList = { title: action.listTitle, todoItems: [] };\r\n       const arrayCopy = [...state.todos];\r\n       arrayCopy.push(newList);\r\n       const updatedState = { todos: arrayCopy };\r\n       return updatedObject(state, updatedState);\r\n};\r\n\r\nconst toggleCompleteReminder = (state, action) => {\r\n       let todosCopy = [...state.todos];\r\n       let updatedReminder = { ...todosCopy[action.reminderListId] };\r\n       let updatedTodoItems = [...updatedReminder.todoItems];\r\n       updatedTodoItems[action.id - 1].isCompleted = !updatedTodoItems[action.id - 1].isCompleted;\r\n\r\n       updatedReminder.todoItems = updatedTodoItems;\r\n       todosCopy[action.reminderListId] = updatedReminder;\r\n       const updatedState = { todos: todosCopy };\r\n       return updatedObject(state, updatedState);\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n       switch (action.type) {\r\n              case actionType.ADD_REMINDER:\r\n                     return addReminder(state, action);\r\n              case actionType.EDIT_REMINDER:\r\n                     return editReminder(state, action);\r\n              case actionType.ADD_LIST:\r\n                     return addList(state, action);\r\n              case actionType.SET_TODO_LIST:\r\n                     return setToDoList(state, action);\r\n              case actionType.TOGGLE_COMPLETE_REMINDER:\r\n                     return toggleCompleteReminder(state, action);\r\n              default:\r\n                     return state;\r\n       }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\n\nimport todoReducer from \"./store/reducers/todoList\";\n\nconst store = createStore(todoReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nconst app = (\n       <Provider store={store}>\n              <App />\n       </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log());\n"],"sourceRoot":""}