{"version":3,"sources":["components/Navigation/SideBar/SideBar.module.scss","components/UI/Input/Input.module.css","components/NewList/NewList.module.css","components/Reminder/Reminder.module.css","components/Layout/Layout.module.css","components/UI/Modal/Modal.module.css","components/UI/Backdrop/Backdrop.module.css","hoc/Ox.js","store/actions/actionTypes.js","store/actions/todoList.js","components/UI/Input/Input.js","components/NewList/NewList.js","components/Reminder/Reminder.js","components/Reminder/ReminderSearch.js","components/UI/Backdrop/Backdrop.js","components/UI/Modal/Modal.js","components/Navigation/SideBar/SideBar.js","components/Layout/Layout.js","App.js","reportWebVitals.js","store/utility.js","store/reducers/todoList.js","index.js"],"names":["module","exports","ox","props","children","ADD_REMINDER","EDIT_REMINDER","ADD_LIST","SET_TODO_LIST","TOGGLE_COMPLETE_REMINDER","addReminder","reminder","index","type","actionTypes","reminderContent","todoListIndex","editReminder","id","flag","reminderListId","reminderId","content","toggleCompleteReminder","input","inputElement","inputClasses","styles","InputElement","invalid","shouldValidate","touched","push","Invalid","center","inputNewList","className","length","elementType","join","elementConfig","value","onChange","changed","options","map","option","displayValue","autoFocus","Input","Label","label","NewList","useState","text","setText","useEffect","topRow","btn","onClick","addListCancelled","disabled","addNewList","middleRow","event","target","handleChange","connect","state","todoList","todos","dispatch","onAddReminder","actions","onEditReminder","onToggleCompleteReminder","isAdding","setIsAdding","newInputStr","setNewInputStr","reminderListCopy","setReminderListCopy","inputRef","useRef","rCopy","reminderListIndex","todoItems","current","focus","onAddBlur","reminderHeader","Ox","Button","returnHandler","style","padding","title","reminderList","Checkbox","icon","checkedIcon","color","idx","listId","checked","completed","desc","reminders","onEditReminderHandler","onBlur","onSaveReminderHandler","newInput","ref","onKeyDown","keyCode","addReminderFooter","show","rList","todo","listIndex","reminderIndex","todoIndex","console","log","searchVal","backdrop","Backdrop","clicked","Modal","modalClosed","transform","opacity","React","memo","prevProps","nextProps","onAddList","listTitle","itemId","setItemId","inputFieldValue","setInputFieldValue","filteredReminders","setFilteredReminders","isOpen","setIsOpen","vw","Math","max","document","documentElement","clientWidth","window","innerWidth","reminderListHandler","arr","searchListHandler","toLowerCase","rows","filterKey","filter","row","JSON","stringify","includes","cancelAddListHandler","onReturnToListsHandler","modal","tdList","item","sidebar__listItems","active","addListFooter","footer","footer__btn","searchBar","sidebar__search","sidebar__icon","sidebar__searchbox","placeholder","e","main","sidebar__label","sidebar","Layout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","updatedObject","oldObject","updatedProperties","initialState","setToDoList","action","updatedTodos","todosCopy","updatedReminder","updatedTodoItems","splice","addList","newList","arrayCopy","reducer","actionType","store","createStore","todoReducer","__REDUX_DEVTOOLS_EXTENSION__","app","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bfee51a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"SideBar_sidebar__1oR41\",\"sidebar-lists\":\"SideBar_sidebar-lists__1Up-s\",\"sidebar__search\":\"SideBar_sidebar__search__3mwSc\",\"sidebar__icon\":\"SideBar_sidebar__icon__17wFG\",\"sidebar__searchbox\":\"SideBar_sidebar__searchbox__3E6tE\",\"sidebar__label\":\"SideBar_sidebar__label__2uL6l\",\"sidebar__listItems\":\"SideBar_sidebar__listItems__1tjyt\",\"active\":\"SideBar_active__oBwRT\",\"sidebar_listItems-count\":\"SideBar_sidebar_listItems-count__i95Sz\",\"footer\":\"SideBar_footer__2yMT7\",\"footer__btn\":\"SideBar_footer__btn__2KopL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1ROT9\",\"Label\":\"Input_Label__1YHhu\",\"InputElement\":\"Input_InputElement__2zTYv\",\"Invalid\":\"Input_Invalid__3OC-P\",\"inputNewList\":\"Input_inputNewList__3ZG9U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topRow\":\"NewList_topRow__2VLZO\",\"btn\":\"NewList_btn__25qcL\",\"middleRow\":\"NewList_middleRow__3bHIf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"reminder-container\":\"Reminder_reminder-container__1CYPX\",\"container--show\":\"Reminder_container--show__24muP\",\"reminder-container-search\":\"Reminder_reminder-container-search__3lPMV\",\"container-header\":\"Reminder_container-header__1g1hL\",\"reminder-btn-return\":\"Reminder_reminder-btn-return__3JT5_\",\"container-btn-navigate-before\":\"Reminder_container-btn-navigate-before__1oRdl\",\"reminder__btn-lists\":\"Reminder_reminder__btn-lists__1gzjP\",\"reminder__btn-lists-icon\":\"Reminder_reminder__btn-lists-icon__1M3_V\",\"reminder__container-search-item\":\"Reminder_reminder__container-search-item__2x2TQ\",\"reminder__reminder-row\":\"Reminder_reminder__reminder-row__3e57_\",\"reminder__todo-title\":\"Reminder_reminder__todo-title__2d8c_\",\"reminder__no-reminder\":\"Reminder_reminder__no-reminder__R2p3j\",\"reminder__btn-radio-container\":\"Reminder_reminder__btn-radio-container__2x3DO\",\"reminder__btn-radio\":\"Reminder_reminder__btn-radio__2Hnq9\",\"reminder__btn-radio--hide\":\"Reminder_reminder__btn-radio--hide__297kf\",\"reminder__row-container\":\"Reminder_reminder__row-container__1VjgI\",\"reminder__reminder-row--hide\":\"Reminder_reminder__reminder-row--hide__1cYSk\",\"reminder__reminder-item\":\"Reminder_reminder__reminder-item__2cbZU\",\"reminder__footer\":\"Reminder_reminder__footer__2utJI\",\"reminder__footer-btn-add\":\"Reminder_reminder__footer-btn-add__9PV4L\",\"newInput\":\"Reminder_newInput__3AaYm\",\"hide\":\"Reminder_hide__tnY0X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__1xBpK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__2duar\",\"Loading\":\"Modal_Loading__2MJjY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__175XD\"};","const ox = props => props.children;\r\n\r\nexport default ox;\r\n","export const ADD_REMINDER = 'ADD_REMINDER';\r\nexport const EDIT_REMINDER = 'EDIT_REMINDER';\r\nexport const REMOVE_REMINDER = 'REMOVE_REMINDER';\r\nexport const ADD_LIST = 'ADD_LIST';\r\nexport const SET_TODO_LIST = 'SET_TODO_LIST';\r\nexport const TOGGLE_COMPLETE_REMINDER = 'TOGGLE_COMPLETE_REMINDER';\r\n","import * as actionTypes from './actionTypes';\r\n\r\nexport const addReminder = (reminder, index) => {\r\n       return {\r\n              type: actionTypes.ADD_REMINDER,\r\n              reminderContent: reminder,\r\n              todoListIndex: index\r\n       };\r\n};\r\n\r\n//1st approach: pass entire reminders list\r\n// export const editReminder = (reminders, index) => {\r\n//        return {\r\n//               type: actionTypes.EDIT_REMINDER,\r\n//               listIndex: index,\r\n//               todoItems: reminders\r\n//        };\r\n// };\r\n\r\n//2nd approach pass flag, edit or remove\r\nexport const editReminder = (id, flag, reminder, reminderListId) => {\r\n       return {\r\n              type: actionTypes.EDIT_REMINDER,\r\n              reminderListId: reminderListId,\r\n              reminderId: id,\r\n              content: reminder,\r\n              flag: flag\r\n       };\r\n};\r\n\r\nexport const removeReminder = index => {\r\n       return {\r\n              type: actionTypes.REMOVE_REMINDER,\r\n              reminderIndex: index\r\n       };\r\n};\r\n\r\nexport const addList = title => {\r\n       return {\r\n              type: actionTypes.ADD_LIST,\r\n              listTitle: title\r\n       };\r\n};\r\n\r\nexport const toggleCompleteReminder = (id, reminderListId) => {\r\n       return {\r\n              type: actionTypes.TOGGLE_COMPLETE_REMINDER,\r\n              id: id,\r\n              reminderListId: reminderListId\r\n       };\r\n};\r\n","import React from 'react';\r\nimport styles from './Input.module.css';\r\n\r\nconst input = props => {\r\n       let inputElement = null;\r\n       const inputClasses = [styles.InputElement];\r\n\r\n       if (props.invalid && props.shouldValidate && props.touched) {\r\n              inputClasses.push(styles.Invalid);\r\n       }\r\n\r\n       if (props.center) {\r\n              inputClasses.push(styles.inputNewList);\r\n       }\r\n\r\n       if (props.className) {\r\n              inputClasses.length = 0;\r\n              inputClasses.push(props.className);\r\n       }\r\n\r\n       switch (props.elementType) {\r\n              case 'input':\r\n                     inputElement = (\r\n                            <input\r\n                                   className={inputClasses.join(' ')}\r\n                                   {...props.elementConfig}\r\n                                   value={props.value}\r\n                                   onChange={props.changed}\r\n                            />\r\n                     );\r\n                     break;\r\n              case 'textarea':\r\n                     inputElement = (\r\n                            <textarea\r\n                                   className={inputClasses.join(' ')}\r\n                                   {...props.elementConfig}\r\n                                   value={props.value}\r\n                                   onChange={props.changed}\r\n                            />\r\n                     );\r\n                     break;\r\n              case 'select':\r\n                     inputElement = (\r\n                            <select className={inputClasses.join(' ')} value={props.value} onChange={props.changed}>\r\n                                   {props.elementConfig.options.map(option => (\r\n                                          <option key={option.value} value={option.value}>\r\n                                                 {option.displayValue}\r\n                                          </option>\r\n                                   ))}\r\n                            </select>\r\n                     );\r\n                     break;\r\n              default:\r\n                     inputElement = (\r\n                            <input\r\n                                   autoFocus\r\n                                   className={inputClasses.join(' ')}\r\n                                   {...props.elementConfig}\r\n                                   value={props.value}\r\n                                   onChange={props.changed}\r\n                            />\r\n                     );\r\n       }\r\n\r\n       return (\r\n              <div className={styles.Input}>\r\n                     <label className={styles.Label}>{props.label}</label>\r\n                     {inputElement}\r\n              </div>\r\n       );\r\n};\r\n\r\nexport default input;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Input from '../UI/Input/Input';\r\nimport styles from './NewList.module.css';\r\n\r\nconst NewList = props => {\r\n       const [text, setText] = useState('');\r\n\r\n       useEffect(() => {\r\n              return () => {\r\n                     setText('');\r\n              };\r\n       }, []);\r\n\r\n       const handleChange = event => {\r\n              // event.preventDefault();\r\n              setText(event.target.value);\r\n       };\r\n\r\n       let topRow = (\r\n              <div className={styles.topRow}>\r\n                     <button className={styles.btn} onClick={props.addListCancelled}>\r\n                            Cancel\r\n                     </button>\r\n                     <div>New List</div>\r\n                     <button className={styles.btn} disabled={!text} onClick={() => props.addNewList(text)}>\r\n                            Done\r\n                     </button>\r\n              </div>\r\n       );\r\n\r\n       return (\r\n              <div>\r\n                     {topRow}\r\n                     <div className={styles.middleRow}>\r\n                            <p>Icon</p>\r\n                            <Input value={text} changed={event => handleChange(event)} center=\"true\" />\r\n                     </div>\r\n              </div>\r\n       );\r\n};\r\n\r\nexport default NewList;\r\n","import Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport RadioButtonChecked from '@material-ui/icons/RadioButtonChecked';\r\nimport CircleUnchecked from '@material-ui/icons/RadioButtonUnchecked';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Ox from '../../hoc/Ox';\r\nimport * as actions from '../../store/actions/index';\r\nimport styles from './Reminder.module.css';\r\n\r\nconst Reminder = props => {\r\n       const [isAdding, setIsAdding] = useState(false);\r\n       const [newInputStr, setNewInputStr] = useState('');\r\n       const [reminderListCopy, setReminderListCopy] = useState([]);\r\n\r\n       let inputRef = useRef();\r\n\r\n       useEffect(() => {\r\n              let rCopy = null;\r\n              rCopy = [...props.todoList[props.reminderListIndex].todoItems];\r\n\r\n              setReminderListCopy(rCopy);\r\n       }, [props.todoList, props.reminderListIndex]); //to remove props.todoList (or not)\r\n\r\n       useEffect(() => {\r\n              if (inputRef && isAdding) {\r\n                     inputRef.current.focus();\r\n              }\r\n       });\r\n\r\n       const onAddBlur = event => {\r\n              setIsAdding(false);\r\n              setNewInputStr('');\r\n              if (event.target.value === '') {\r\n                     return;\r\n              }\r\n              props.onAddReminder(event.target.value, props.reminderListIndex);\r\n       };\r\n\r\n       const newInputHandler = () => {\r\n              setIsAdding(true);\r\n              //if newinputField exists, dont allow new reminder to be clicked\r\n       };\r\n\r\n       const onEditReminderHandler = (id, event) => {\r\n              // event.preventDefault(); //not sure if needed (removed; for verification)\r\n              let reminders = [...reminderListCopy];\r\n              reminders[id] = event.target.value;\r\n              setReminderListCopy(reminders); //update state copy\r\n       };\r\n\r\n       const onSaveReminderHandler = (id, event) => {\r\n              if (event.target.value === '') {\r\n                     props.onEditReminder(id, 'remove', null, props.reminderListIndex);\r\n                     return;\r\n              }\r\n              props.onEditReminder(id, 'edit', event.target.value, props.reminderListIndex);\r\n       };\r\n\r\n       const onToggleCheckboxHandler = (idx, listId) => {\r\n              props.onToggleCompleteReminder(idx, listId);\r\n       };\r\n\r\n       const onKeypressHandler = event => {\r\n              if (event.keyCode === 13) {\r\n                     onAddBlur(event);\r\n              }\r\n       };\r\n\r\n       let reminderHeader = (\r\n              <Ox>\r\n                     <div className={styles['reminder-btn-return']}>\r\n                            <Button onClick={props.returnHandler} style={{ padding: '6px 8px 6px 0px' }}>\r\n                                   <NavigateBeforeIcon />\r\n                                   Lists\r\n                            </Button>\r\n                     </div>\r\n                     <h2 className={styles['reminder__todo-title']}>{props.todoList[props.reminderListIndex].title}</h2>\r\n              </Ox>\r\n       );\r\n\r\n       let reminderList = <div className={styles['reminder__no-reminder']}>No Reminders</div>;\r\n       if (props.todoList[props.reminderListIndex].todoItems.length > 0) {\r\n              let reminders = reminderListCopy;\r\n              reminderList = reminders.map((reminder, index) => {\r\n                     return (\r\n                            <div key={index} className={styles['reminder__row-container']}>\r\n                                   <div className={styles['reminder__btn-radio-container']}>\r\n                                          <Checkbox\r\n                                                 icon={<CircleUnchecked />}\r\n                                                 checkedIcon={<RadioButtonChecked />}\r\n                                                 color=\"default\"\r\n                                                 onClick={() => onToggleCheckboxHandler(index, props.reminderListIndex)}\r\n                                                 checked={reminder.completed}\r\n                                                 className={styles['reminder__btn-radio']}\r\n                                          />\r\n                                   </div>\r\n                                   <div className={styles['reminder__reminder-row']} key={index}>\r\n                                          <input\r\n                                                 className={styles['reminder__reminder-item']}\r\n                                                 type=\"text\"\r\n                                                 id={index}\r\n                                                 // value={item === reminderListCopy[index] ? reminderListCopy[index] : ''}\r\n                                                 value={reminder.desc}\r\n                                                 onChange={event => onEditReminderHandler(index, event)}\r\n                                                 onBlur={event => onSaveReminderHandler(index, event)}\r\n                                          />\r\n                                   </div>\r\n                            </div>\r\n                     );\r\n              });\r\n       }\r\n\r\n       let newInput = (\r\n              <div className={styles['reminder__row-container']}>\r\n                     <Checkbox\r\n                            icon={<CircleUnchecked />}\r\n                            checkedIcon={<RadioButtonChecked />}\r\n                            color=\"default\"\r\n                            checked={false}\r\n                            className={isAdding ? styles['reminder__btn-radio'] : styles['reminder__btn-radio--hide']}\r\n                     />\r\n                     <div\r\n                            className={\r\n                                   isAdding ? styles['reminder__reminder-row'] : styles['reminder__reminder-row--hide']\r\n                            }>\r\n                            <input\r\n                                   className={styles['reminder__reminder-item']}\r\n                                   value={newInputStr}\r\n                                   onChange={event => setNewInputStr(event.target.value)}\r\n                                   onBlur={event => onAddBlur(event)}\r\n                                   ref={inputRef}\r\n                                   onKeyDown={onKeypressHandler}\r\n                            />\r\n                     </div>\r\n              </div>\r\n       );\r\n\r\n       const addReminderFooter = (\r\n              <div className={styles['reminder__footer']}>\r\n                     <button\r\n                            className={styles['reminder__footer-btn-add']}\r\n                            disabled={isAdding}\r\n                            onClick={newInputHandler}>\r\n                            New Reminder\r\n                     </button>\r\n              </div>\r\n       );\r\n\r\n       return (\r\n              <div className={`${styles['reminder-container']} ${props.show ? styles['container--show'] : ''}`}>\r\n                     {reminderHeader}\r\n                     {reminderList}\r\n                     {newInput}\r\n                     {addReminderFooter}\r\n              </div>\r\n       );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n       return {\r\n              todoList: state.todos\r\n       };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n       return {\r\n              onAddReminder: (reminder, index) => dispatch(actions.addReminder(reminder, index)),\r\n              onEditReminder: (id, flag, reminder, reminderListId) =>\r\n                     dispatch(actions.editReminder(id, flag, reminder, reminderListId)),\r\n              onToggleCompleteReminder: (id, reminderListId) =>\r\n                     dispatch(actions.toggleCompleteReminder(id, reminderListId))\r\n       };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Reminder);\r\n","import Checkbox from '@material-ui/core/Checkbox';\r\nimport RadioButtonChecked from '@material-ui/icons/RadioButtonChecked';\r\nimport CircleUnchecked from '@material-ui/icons/RadioButtonUnchecked';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\nimport styles from './Reminder.module.css';\r\n\r\nconst ReminderSearch = props => {\r\n       const [reminderListCopy, setReminderListCopy] = useState([]);\r\n\r\n       useEffect(() => {\r\n              let rCopy = [...props.rList];\r\n              setReminderListCopy(rCopy);\r\n       }, [props.todoList, props.rList]); //to remove props.todoList (or not)\r\n\r\n       const onEditReminderHandler = (id, event, todoIndex) => {\r\n              // event.preventDefault(); //not sure if needed (removed; for verification)\r\n              let reminders = [...reminderListCopy];\r\n              reminders[todoIndex].todoItems[id] = event.target.value;\r\n              console.log(reminders);\r\n              setReminderListCopy(reminders); //update state copy\r\n       };\r\n\r\n       const onSaveReminderHandler = (id, event, todoIndex) => {\r\n              //2nd approach: send todoItemIndex, flag, and depending on the flag(edit or remove) will pass the value;\r\n              if (event.target.value === '') {\r\n                     props.onEditReminder(id, 'remove', null, todoIndex);\r\n                     return;\r\n              }\r\n              props.onEditReminder(id, 'edit', event.target.value, todoIndex);\r\n       };\r\n\r\n       const onToggleCheckboxHandler = (idx, listId) => {\r\n              props.onToggleCompleteReminder(idx, listId);\r\n       };\r\n\r\n       let reminderList = <div></div>;\r\n       if (reminderListCopy.length > 0) {\r\n              let reminders = reminderListCopy;\r\n              reminderList = reminders.map((todo, listIndex) => {\r\n                     return (\r\n                            <div key={listIndex} className={`${styles['reminder__container-search-item']}`}>\r\n                                   <h2 className={styles['reminder__todo-title']}>{todo.title}</h2>\r\n                                   {todo.todoItems.map((reminder, reminderIndex) => {\r\n                                          return (\r\n                                                 <div key={reminderIndex} className={styles['reminder__row-container']}>\r\n                                                        <div className={styles['reminder__btn-radio-container']}>\r\n                                                               <Checkbox\r\n                                                                      icon={<CircleUnchecked />}\r\n                                                                      checkedIcon={<RadioButtonChecked />}\r\n                                                                      color=\"default\"\r\n                                                                      onClick={() =>\r\n                                                                             onToggleCheckboxHandler(\r\n                                                                                    reminderIndex,\r\n                                                                                    listIndex\r\n                                                                             )\r\n                                                                      }\r\n                                                                      checked={reminder.completed}\r\n                                                                      className={styles['reminder__btn-radio']}\r\n                                                               />\r\n                                                        </div>\r\n                                                        <div\r\n                                                               className={styles['reminder__reminder-row']}\r\n                                                               key={listIndex}>\r\n                                                               <input\r\n                                                                      className={styles['reminder__reminder-item']}\r\n                                                                      type=\"text\"\r\n                                                                      id={reminderIndex}\r\n                                                                      value={reminder.desc}\r\n                                                                      onChange={event =>\r\n                                                                             onEditReminderHandler(\r\n                                                                                    reminderIndex,\r\n                                                                                    event,\r\n                                                                                    listIndex\r\n                                                                             )\r\n                                                                      }\r\n                                                                      onBlur={event =>\r\n                                                                             onSaveReminderHandler(\r\n                                                                                    reminderIndex,\r\n                                                                                    event,\r\n                                                                                    listIndex\r\n                                                                             )\r\n                                                                      }\r\n                                                               />\r\n                                                        </div>\r\n                                                 </div>\r\n                                          );\r\n                                   })}\r\n                            </div>\r\n                     );\r\n              });\r\n       }\r\n\r\n       return (\r\n              <div className={styles['reminder-container-search']}>\r\n                     <h1 className={styles['container-header']}>Results for \"{props.searchVal}\"</h1>\r\n                     {reminderList}\r\n              </div>\r\n       );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n       return {\r\n              todoList: state.todos\r\n       };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n       return {\r\n              onAddReminder: (reminder, index) => dispatch(actions.addReminder(reminder, index)),\r\n              onEditReminder: (id, flag, reminder, reminderListId) =>\r\n                     dispatch(actions.editReminder(id, flag, reminder, reminderListId)),\r\n              onToggleCompleteReminder: (id, reminderListId) =>\r\n                     dispatch(actions.toggleCompleteReminder(id, reminderListId))\r\n       };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReminderSearch);\r\n","import React from 'react';\r\nimport styles from './Backdrop.module.css';\r\n\r\nconst backdrop = (props) =>\r\n  props.show ? (\r\n    <div className={styles.Backdrop} onClick={props.clicked}></div>\r\n  ) : null;\r\n\r\nexport default backdrop;\r\n","import React from 'react';\r\nimport styles from './Modal.module.css';\r\nimport Ox from '../../../hoc/Ox';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\n// import classNames from 'classnames';\r\n\r\nconst Modal = props => {\r\n       // shouldComponentUpdate(nextProps, nextState) {\r\n       //        return nextProps.show !== this.props.show || nextProps.children !== this.props.children;\r\n       // }\r\n\r\n       return (\r\n              <Ox>\r\n                     <Backdrop show={props.show} clicked={props.modalClosed} />\r\n                     <div\r\n                            className={styles.Modal}\r\n                            //  {classNames({\r\n                            //         [styles['Modal']]: true,\r\n                            //         [styles['Loading']]: props.loading\r\n                            //  })}\r\n                            style={{\r\n                                   transform: props.show ? 'translateY(0)' : 'translateY(-100vh)',\r\n                                   opacity: props.show ? '1' : '0'\r\n                            }}>\r\n                            {props.children}\r\n                     </div>\r\n              </Ox>\r\n       );\r\n};\r\n\r\nexport default React.memo(\r\n       Modal,\r\n       (prevProps, nextProps) => nextProps.show === prevProps.show && nextProps.children === prevProps.children\r\n);\r\n","import NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { FaSearch } from 'react-icons/fa';\r\nimport { connect } from 'react-redux';\r\nimport Ox from '../../../hoc/Ox';\r\nimport * as actions from '../../../store/actions/index';\r\nimport NewList from '../../NewList/NewList';\r\nimport Reminder from '../../Reminder/Reminder';\r\nimport ReminderSearch from '../../Reminder/ReminderSearch';\r\nimport Modal from '../../UI/Modal/Modal';\r\nimport styles from './SideBar.module.scss';\r\n\r\nconst SideBar = props => {\r\n       const [itemId, setItemId] = useState(0);\r\n       const [isAdding, setIsAdding] = useState(false);\r\n       const [inputFieldValue, setInputFieldValue] = useState('');\r\n       const [filteredReminders, setFilteredReminders] = useState([]);\r\n       const [isOpen, setIsOpen] = useState(false);\r\n       let vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);\r\n       useEffect(() => {\r\n              reminderListHandler();\r\n       }, [inputFieldValue, itemId]);\r\n\r\n       const onTodoClickHandler = id => {\r\n              setItemId(id);\r\n              reminderListHandler(id);\r\n              setIsOpen(true);\r\n       };\r\n\r\n       const reminderListHandler = id => {\r\n              if (inputFieldValue) {\r\n                     let arr = searchListHandler(props.todoList, inputFieldValue.toLowerCase());\r\n                     setFilteredReminders(arr);\r\n              }\r\n              // console.log(filteredReminders); //always delay to reflect current vlaue; would reflect on next batch update\r\n       };\r\n\r\n       const searchListHandler = (rows, filterKey) => {\r\n              return rows.filter(row => JSON.stringify(row).toLowerCase().includes(filterKey));\r\n       };\r\n\r\n       const showAddListHandler = () => {\r\n              setIsAdding(true);\r\n       };\r\n\r\n       const cancelAddListHandler = () => {\r\n              setIsAdding(false);\r\n       };\r\n\r\n       const addListHandler = text => {\r\n              props.onAddList(text);\r\n              setIsAdding(false);\r\n       };\r\n\r\n       const onReturnToListsHandler = () => {\r\n              setIsOpen(false);\r\n       };\r\n\r\n       const modal = (\r\n              <Modal show={isAdding} modalClosed={cancelAddListHandler}>\r\n                     <NewList addListCancelled={cancelAddListHandler} addNewList={addListHandler} />\r\n              </Modal>\r\n       );\r\n\r\n       const tdList = props.todoList.map((item, index) => {\r\n              return (\r\n                     <div\r\n                            key={index}\r\n                            className={`${styles.sidebar__listItems} ${index === itemId ? styles.active : ''}`}\r\n                            onClick={() => onTodoClickHandler(index)}>\r\n                            <div>{item.title}</div>\r\n                            <div className={styles['sidebar_listItems-count']}>{item.todoItems.length}</div>\r\n                            <NavigateNextIcon />\r\n                     </div>\r\n              );\r\n       });\r\n\r\n       const addListFooter = (\r\n              <div className={styles.footer}>\r\n                     {/* <div className={`${styles.footer} ${isOpen ? styles['footer--hide'] : \"\"}`}> */}\r\n                     <button className={styles.footer__btn} onClick={showAddListHandler}>\r\n                            Add List\r\n                     </button>\r\n              </div>\r\n       );\r\n\r\n       let reminders = <Reminder reminderListIndex={itemId} show={isOpen} returnHandler={onReturnToListsHandler} />;\r\n       if (inputFieldValue) {\r\n              reminders = (\r\n                     <ReminderSearch\r\n                            rList={filteredReminders}\r\n                            searchVal={inputFieldValue}\r\n                            show={isOpen}\r\n                            returnHandler={onReturnToListsHandler}\r\n                     />\r\n              );\r\n       }\r\n\r\n       const searchBar = (\r\n              <div className={styles.sidebar__search}>\r\n                     <FaSearch className={styles.sidebar__icon}></FaSearch>\r\n                     <input\r\n                            className={styles.sidebar__searchbox}\r\n                            placeholder=\"Search\"\r\n                            value={inputFieldValue}\r\n                            onChange={e => setInputFieldValue(e.target.value)}\r\n                     />\r\n              </div>\r\n       );\r\n\r\n       let main = (\r\n              <div className={styles['sidebar-lists']}>\r\n                     <h3 className={styles.sidebar__label}>My Lists</h3>\r\n                     {tdList}\r\n              </div>\r\n       );\r\n       if (inputFieldValue && vw < 500) {\r\n              main = <div>{reminders}</div>;\r\n       }\r\n\r\n       return (\r\n              <Ox>\r\n                     {isAdding ? modal : null}\r\n                     <div className={styles.sidebar}>\r\n                            {searchBar}\r\n                            {main}\r\n                     </div>\r\n                     {addListFooter}\r\n                     {inputFieldValue && vw < 500 ? null : reminders}\r\n              </Ox>\r\n       );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n       return {\r\n              todoList: state.todos\r\n       };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n       return {\r\n              onAddList: title => dispatch(actions.addList(title))\r\n       };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SideBar);\r\n","import React from 'react';\r\nimport styles from './Layout.module.css';\r\n\r\nimport SideBar from '../Navigation/SideBar/SideBar';\r\n// import Reminder from '../Reminder/Reminder';\r\n\r\nconst Layout = props => {\r\n       return (\r\n              <div className={styles.Layout}>\r\n                     <SideBar></SideBar>\r\n              </div>\r\n       );\r\n};\r\n\r\nexport default Layout;\r\n","import React from 'react';\nimport './App.css';\nimport Layout from './components/Layout/Layout';\n\nconst App = props => {\n       return (\n              <div className=\"App\">\n                     <Layout />\n              </div>\n       );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const updatedObject = (oldObject, updatedProperties) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedProperties\r\n  };\r\n};\r\n","import * as actionType from '../actions/actionTypes';\r\nimport { updatedObject } from '../utility';\r\n\r\nconst initialState = {\r\n       todos: [\r\n              {\r\n                     title: 'monday',\r\n                     todoItems: [\r\n                            { desc: 'exercise', completed: false },\r\n                            { desc: 'go to bank', completed: false },\r\n                            { desc: 'prepare clothes for laundry', completed: false }\r\n                     ]\r\n              },\r\n              {\r\n                     title: 'app ideas',\r\n                     todoItems: [{ desc: 'gps tracker', completed: false }]\r\n              },\r\n              {\r\n                     title: 'groceries',\r\n                     todoItems: [\r\n                            { desc: 'apple', completed: false },\r\n                            { desc: 'bread', completed: false },\r\n                            { desc: 'yoghurt', completed: false }\r\n                     ]\r\n              }\r\n              // {\r\n              //        title: 'monday',\r\n              //        todoItems: ['exercise', 'go to bank', 'fix laundry']\r\n              // }\r\n       ]\r\n};\r\nconst setToDoList = (state, action) => {\r\n       return updatedObject(state, {\r\n              todoList: {\r\n                     title: action.todoList.title,\r\n                     todos: action.todoList\r\n              }\r\n       });\r\n};\r\n\r\nconst addReminder = (state, action) => {\r\n       let updatedTodos = state.todos.map((arr, index) => {\r\n              if (index === action.todoListIndex) {\r\n                     let item = { desc: action.reminderContent, completed: false };\r\n                     arr.todoItems.push(item);\r\n              }\r\n              return arr;\r\n       });\r\n\r\n       const updatedState = {\r\n              todos: updatedTodos\r\n       };\r\n       return updatedObject(state, updatedState);\r\n};\r\n\r\nconst editReminder = (state, action) => {\r\n       //1st approach\r\n       // const todosCopy = [...state.todos];\r\n       // let updatedReminder = { ...todosCopy[action.reminderListId] };\r\n       // let updatedTodoItems = [...updatedReminder.todoItems];\r\n       // updatedTodoItems = action.todoItems;\r\n       // updatedReminder.todoItems = updatedTodoItems;\r\n       // todosCopy[action.reminderListId] = updatedReminder;\r\n       // const updatedState = { todos: todosCopy };\r\n\r\n       //2nd approach\r\n       const todosCopy = [...state.todos];\r\n       let updatedReminder = { ...todosCopy[action.reminderListId] };\r\n       let updatedTodoItems = [...updatedReminder.todoItems];\r\n       if (action.flag === 'remove') {\r\n              updatedTodoItems.splice(action.reminderId, 1);\r\n       } else if (action.flag === 'edit') {\r\n              let updatedReminder = { ...updatedTodoItems[action.reminderId] };\r\n              updatedReminder.desc = action.content;\r\n              console.log(updatedReminder);\r\n              updatedTodoItems.splice(action.reminderId, 1, updatedReminder);\r\n       }\r\n       updatedReminder.todoItems = updatedTodoItems;\r\n       todosCopy[action.reminderListId] = updatedReminder;\r\n       const updatedState = { todos: todosCopy };\r\n       return updatedObject(state, updatedState);\r\n};\r\n\r\nconst addList = (state, action) => {\r\n       const newList = { title: action.listTitle, todoItems: [] };\r\n       const arrayCopy = [...state.todos];\r\n       arrayCopy.push(newList);\r\n       const updatedState = { todos: arrayCopy };\r\n       return updatedObject(state, updatedState);\r\n};\r\n\r\nconst toggleCompleteReminder = (state, action) => {\r\n       let todosCopy = [...state.todos];\r\n       let updatedReminder = { ...todosCopy[action.reminderListId] };\r\n       let updatedTodoItems = [...updatedReminder.todoItems];\r\n       updatedTodoItems[action.id].completed = !updatedTodoItems[action.id].completed;\r\n\r\n       updatedReminder.todoItems = updatedTodoItems;\r\n       todosCopy[action.reminderListId] = updatedReminder;\r\n       const updatedState = { todos: todosCopy };\r\n       return updatedObject(state, updatedState);\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n       switch (action.type) {\r\n              case actionType.ADD_REMINDER:\r\n                     return addReminder(state, action);\r\n              case actionType.EDIT_REMINDER:\r\n                     return editReminder(state, action);\r\n              case actionType.ADD_LIST:\r\n                     return addList(state, action);\r\n              case actionType.SET_TODO_LIST:\r\n                     return setToDoList(state, action);\r\n              case actionType.TOGGLE_COMPLETE_REMINDER:\r\n                     return toggleCompleteReminder(state, action);\r\n              default:\r\n                     return state;\r\n       }\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport todoReducer from './store/reducers/todoList';\n\nconst store = createStore(todoReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nconst app = (\n       <Provider store={store}>\n              <App />\n       </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log());\n"],"sourceRoot":""}