{"version":3,"sources":["components/Navigation/SideBar/SideBar.module.scss","components/UI/Input/Input.module.css","components/NewList/NewList.module.css","components/Layout/Layout.module.css","components/Reminder/Reminder.module.css","components/UI/Modal/Modal.module.css","components/UI/Backdrop/Backdrop.module.css","hoc/Ox.js","store/actions/actionTypes.js","store/actions/todoList.js","components/UI/Input/Input.js","components/NewList/NewList.js","components/Reminder/Reminder.js","components/Reminder/ReminderSearch.js","components/UI/Backdrop/Backdrop.js","components/UI/Modal/Modal.js","components/Navigation/SideBar/SideBar.js","components/Layout/Layout.js","App.js","reportWebVitals.js","store/utility.js","store/reducers/todoList.js","index.js"],"names":["module","exports","ox","props","children","ADD_REMINDER","EDIT_REMINDER","ADD_LIST","SET_TODO_LIST","addReminder","reminder","index","type","actionTypes","reminderContent","todoListIndex","editReminder","id","flag","reminderListId","reminderId","content","input","inputElement","inputClasses","styles","InputElement","invalid","shouldValidate","touched","push","Invalid","center","inputNewList","className","length","elementType","join","elementConfig","value","onChange","changed","options","map","option","displayValue","autoFocus","Input","Label","label","NewList","useState","text","setText","inputRef","useRef","useEffect","topRow","btn","onClick","addListCancelled","disabled","addNewList","middleRow","event","target","handleChange","ref","connect","state","todoList","todos","dispatch","onAddReminder","actions","onEditReminder","isAdding","setIsAdding","newInputStr","setNewInputStr","reminderListCopy","setReminderListCopy","rCopy","reminderListIndex","todoItems","current","focus","reminderList","item","reminders","onEditReminderHandler","onBlur","console","log","onSaveReminderHandler","newInput","onAddBlur","addReminderFooter","show","Button","returnHandler","style","padding","title","rList","todo","reminderIndex","radioBtn","reminderItem","todoIndex","reminderContainer","searchVal","backdrop","Backdrop","clicked","Modal","Ox","modalClosed","transform","opacity","React","memo","prevProps","nextProps","onAddList","listTitle","itemId","setItemId","inputFieldValue","setInputFieldValue","filteredReminders","setFilteredReminders","isOpen","setIsOpen","reminderListHandler","arr","searchListHandler","rows","filterKey","filter","row","JSON","stringify","toLowerCase","includes","cancelAddListHandler","onReturnToListsHandler","tdList","sidebar__listItems","active","addListFooter","footer","footer__btn","modal","sidebar","sidebar__search","sidebar__icon","sidebar__searchbox","placeholder","e","sidebar__label","Layout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","updatedObject","oldObject","updatedProperties","initialState","setToDoList","action","updatedTodos","todosCopy","updatedReminder","updatedTodoItems","splice","updatedState","addList","newList","arrayCopy","reducer","actionType","store","createStore","todoReducer","window","__REDUX_DEVTOOLS_EXTENSION__","getState","app","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ecc7f792.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"SideBar_sidebar__1oR41\",\"sidebar__search\":\"SideBar_sidebar__search__3mwSc\",\"sidebar__icon\":\"SideBar_sidebar__icon__17wFG\",\"sidebar__searchbox\":\"SideBar_sidebar__searchbox__3E6tE\",\"sidebar__label\":\"SideBar_sidebar__label__2uL6l\",\"sidebar__listItems\":\"SideBar_sidebar__listItems__1tjyt\",\"active\":\"SideBar_active__oBwRT\",\"sidebar_listItems-count\":\"SideBar_sidebar_listItems-count__i95Sz\",\"footer\":\"SideBar_footer__2yMT7\",\"footer__btn\":\"SideBar_footer__btn__2KopL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1ROT9\",\"Label\":\"Input_Label__1YHhu\",\"InputElement\":\"Input_InputElement__2zTYv\",\"Invalid\":\"Input_Invalid__3OC-P\",\"inputNewList\":\"Input_inputNewList__3ZG9U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topRow\":\"NewList_topRow__2VLZO\",\"btn\":\"NewList_btn__25qcL\",\"middleRow\":\"NewList_middleRow__3bHIf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__1xBpK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"reminder-container\":\"Reminder_reminder-container__1CYPX\",\"container--show\":\"Reminder_container--show__24muP\",\"container-btn-navigate-before\":\"Reminder_container-btn-navigate-before__1oRdl\",\"reminder__btn-lists\":\"Reminder_reminder__btn-lists__1gzjP\",\"reminder__btn-lists-icon\":\"Reminder_reminder__btn-lists-icon__1M3_V\",\"reminder__todo-title\":\"Reminder_reminder__todo-title__2d8c_\",\"reminder__no-reminder\":\"Reminder_reminder__no-reminder__R2p3j\",\"reminder__btn-radio-container\":\"Reminder_reminder__btn-radio-container__2x3DO\",\"reminder__btn-radio\":\"Reminder_reminder__btn-radio__2Hnq9\",\"reminder__btn-radio--hide\":\"Reminder_reminder__btn-radio--hide__297kf\",\"reminder__reminder-row\":\"Reminder_reminder__reminder-row__3e57_\",\"reminder__reminder-row--hide\":\"Reminder_reminder__reminder-row--hide__1cYSk\",\"reminder__reminder-item\":\"Reminder_reminder__reminder-item__2cbZU\",\"reminder__footer\":\"Reminder_reminder__footer__2utJI\",\"footer--show\":\"Reminder_footer--show__1A2uu\",\"reminder__footer-btn-add\":\"Reminder_reminder__footer-btn-add__9PV4L\",\"newInput\":\"Reminder_newInput__3AaYm\",\"hide\":\"Reminder_hide__tnY0X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__2duar\",\"Loading\":\"Modal_Loading__2MJjY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__175XD\"};","const ox = props => props.children;\r\n\r\nexport default ox;\r\n","export const ADD_REMINDER = 'ADD_REMINDER';\r\nexport const EDIT_REMINDER = 'EDIT_REMINDER';\r\nexport const REMOVE_REMINDER = 'REMOVE_REMINDER';\r\nexport const ADD_LIST = 'ADD_LIST';\r\nexport const SET_TODO_LIST = 'SET_TODO_LIST';\r\n","import * as actionTypes from './actionTypes';\r\n\r\nexport const addReminder = (reminder, index) => {\r\n       return {\r\n              type: actionTypes.ADD_REMINDER,\r\n              reminderContent: reminder,\r\n              todoListIndex: index\r\n       };\r\n};\r\n\r\n//1st approach: pass entire reminders list\r\n// export const editReminder = (reminders, index) => {\r\n//        return {\r\n//               type: actionTypes.EDIT_REMINDER,\r\n//               listIndex: index,\r\n//               todoItems: reminders\r\n//        };\r\n// };\r\n\r\n//2nd approach pass flag, edit or remove\r\nexport const editReminder = (id, flag, reminder, reminderListId) => {\r\n       return {\r\n              type: actionTypes.EDIT_REMINDER,\r\n              reminderListId: reminderListId,\r\n              reminderId: id,\r\n              content: reminder,\r\n              flag: flag\r\n       };\r\n};\r\n\r\nexport const removeReminder = index => {\r\n       return {\r\n              type: actionTypes.REMOVE_REMINDER,\r\n              reminderIndex: index\r\n       };\r\n};\r\n\r\nexport const addList = title => {\r\n       return {\r\n              type: actionTypes.ADD_LIST,\r\n              listTitle: title\r\n       };\r\n};\r\n","import React from 'react';\r\nimport styles from './Input.module.css';\r\n\r\nconst input = props => {\r\n       let inputElement = null;\r\n       const inputClasses = [styles.InputElement];\r\n\r\n       if (props.invalid && props.shouldValidate && props.touched) {\r\n              inputClasses.push(styles.Invalid);\r\n       }\r\n\r\n       if (props.center) {\r\n              inputClasses.push(styles.inputNewList);\r\n       }\r\n\r\n       if (props.className) {\r\n              inputClasses.length = 0;\r\n              inputClasses.push(props.className);\r\n       }\r\n\r\n       switch (props.elementType) {\r\n              case 'input':\r\n                     inputElement = (\r\n                            <input\r\n                                   className={inputClasses.join(' ')}\r\n                                   {...props.elementConfig}\r\n                                   value={props.value}\r\n                                   onChange={props.changed}\r\n                            />\r\n                     );\r\n                     break;\r\n              case 'textarea':\r\n                     inputElement = (\r\n                            <textarea\r\n                                   className={inputClasses.join(' ')}\r\n                                   {...props.elementConfig}\r\n                                   value={props.value}\r\n                                   onChange={props.changed}\r\n                            />\r\n                     );\r\n                     break;\r\n              case 'select':\r\n                     inputElement = (\r\n                            <select className={inputClasses.join(' ')} value={props.value} onChange={props.changed}>\r\n                                   {props.elementConfig.options.map(option => (\r\n                                          <option key={option.value} value={option.value}>\r\n                                                 {option.displayValue}\r\n                                          </option>\r\n                                   ))}\r\n                            </select>\r\n                     );\r\n                     break;\r\n              default:\r\n                     inputElement = (\r\n                            <input\r\n                                   autoFocus\r\n                                   className={inputClasses.join(' ')}\r\n                                   {...props.elementConfig}\r\n                                   value={props.value}\r\n                                   onChange={props.changed}\r\n                            />\r\n                     );\r\n       }\r\n\r\n       return (\r\n              <div className={styles.Input}>\r\n                     <label className={styles.Label}>{props.label}</label>\r\n                     {inputElement}\r\n              </div>\r\n       );\r\n};\r\n\r\nexport default input;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Input from '../UI/Input/Input';\r\nimport styles from './NewList.module.css';\r\n\r\nconst NewList = props => {\r\n       const [text, setText] = useState('');\r\n       const inputRef = useRef();\r\n\r\n       useEffect(() => {\r\n              return () => {\r\n                     setText('');\r\n              };\r\n       }, []);\r\n\r\n       const handleChange = event => {\r\n              // event.preventDefault();\r\n              setText(event.target.value);\r\n       };\r\n\r\n       let topRow = (\r\n              <div className={styles.topRow}>\r\n                     <button className={styles.btn} onClick={props.addListCancelled}>\r\n                            Cancel\r\n                     </button>\r\n                     <div>New List</div>\r\n                     <button className={styles.btn} disabled={!text} onClick={() => props.addNewList(text)}>\r\n                            Done\r\n                     </button>\r\n              </div>\r\n       );\r\n\r\n       return (\r\n              <div>\r\n                     {topRow}\r\n                     <div className={styles.middleRow}>\r\n                            <p>Icon</p>\r\n                            <Input value={text} changed={event => handleChange(event)} ref={inputRef} center=\"true\" />\r\n                     </div>\r\n              </div>\r\n       );\r\n};\r\n\r\nexport default NewList;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styles from './Reminder.module.css';\r\n\r\nimport * as actions from '../../store/actions/index';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst Reminder = props => {\r\n       const [isAdding, setIsAdding] = useState(false);\r\n       const [newInputStr, setNewInputStr] = useState('');\r\n       const [reminderListCopy, setReminderListCopy] = useState([]);\r\n\r\n       let inputRef = useRef();\r\n\r\n       useEffect(() => {\r\n              let rCopy = null;\r\n              // if (props.rList === undefined || props.rList.length === 0) {\r\n              //        rCopy = [...props.todoList[props.reminderListIndex].todoItems];\r\n              // } else {\r\n              //        rCopy = [...props.rList.todoItems];\r\n              // }\r\n              rCopy = [...props.todoList[props.reminderListIndex].todoItems];\r\n\r\n              setReminderListCopy(rCopy);\r\n       }, [props.todoList, props.reminderListIndex]); //to remove props.todoList (or not)\r\n\r\n       useEffect(() => {\r\n              if (inputRef && isAdding) {\r\n                     inputRef.current.focus();\r\n              }\r\n       });\r\n\r\n       const onAddBlur = event => {\r\n              setIsAdding(false);\r\n              setNewInputStr('');\r\n              if (event.target.value === '') {\r\n                     return;\r\n              }\r\n              props.onAddReminder(event.target.value, props.reminderListIndex);\r\n       };\r\n\r\n       const newInputHandler = () => {\r\n              setIsAdding(true);\r\n              //if newinputField exists, dont allow new reminder to be clicked\r\n       };\r\n\r\n       const onEditReminderHandler = (id, event) => {\r\n              // event.preventDefault(); //not sure if needed (removed; for verification)\r\n              let reminders = [...reminderListCopy];\r\n              reminders[id] = event.target.value;\r\n              setReminderListCopy(reminders); //update state copy\r\n       };\r\n\r\n       const onSaveReminderHandler = (id, event) => {\r\n              // console.log(event.target.value);\r\n              //1st approach: send whole array\r\n              // let updatedReminderList = [...reminderListCopy];\r\n              // props.onEditReminder(updatedReminderList, props.reminderListIndex); //pass whole reminderlist and reminderListIndex\r\n\r\n              //2nd approach: send todoItemIndex, flag, and depending on the flag(edit or remove) will pass the value;\r\n              console.log(props.reminderListIndex);\r\n              if (event.target.value === '') {\r\n                     props.onEditReminder(id, 'remove', null, props.reminderListIndex);\r\n                     return;\r\n              }\r\n              props.onEditReminder(id, 'edit', event.target.value, props.reminderListIndex);\r\n       };\r\n\r\n       let reminderList = <div className={styles['reminder__no-reminder']}>No Reminders</div>;\r\n       if (props.todoList[props.reminderListIndex].todoItems.length > 0) {\r\n              let reminders = reminderListCopy;\r\n              reminderList = reminders.map((item, index) => {\r\n                     return (\r\n                            <div>\r\n                                   <div className={styles['reminder__btn-radio-container']}>\r\n                                          <input className={styles['reminder__btn-radio']} type=\"radio\" />\r\n                                   </div>\r\n                                   <div className={styles['reminder__reminder-row']} key={index}>\r\n                                          <input\r\n                                                 className={styles['reminder__reminder-item']}\r\n                                                 type=\"text\"\r\n                                                 id={index}\r\n                                                 // value={item === reminderListCopy[index] ? reminderListCopy[index] : ''}\r\n                                                 value={item}\r\n                                                 onChange={event => onEditReminderHandler(index, event)}\r\n                                                 onBlur={event => onSaveReminderHandler(index, event)}\r\n                                          />\r\n                                   </div>\r\n                            </div>\r\n                     );\r\n              });\r\n       }\r\n\r\n       let newInput = (\r\n              <div>\r\n                     <input type=\"radio\" className={isAdding ? styles['reminder__btn-radio'] : styles['reminder__btn-radio--hide']} />\r\n                     <div className={isAdding ? styles['reminder__reminder-row'] : styles['reminder__reminder-row--hide']}>\r\n                            <input\r\n                                   className={styles['reminder__reminder-item']}\r\n                                   value={newInputStr}\r\n                                   onChange={event => setNewInputStr(event.target.value)}\r\n                                   onBlur={event => onAddBlur(event)}\r\n                                   ref={inputRef}\r\n                            />\r\n                     </div>\r\n              </div>\r\n       );\r\n\r\n       const addReminderFooter = (\r\n              <div className={`${styles['reminder__footer']} ${props.show ? styles['footer--show'] : ''}`}>\r\n                     <button className={styles['reminder__footer-btn-add']} disabled={isAdding} onClick={newInputHandler}>\r\n                            New Reminder\r\n                     </button>\r\n              </div>\r\n       );\r\n       return (\r\n              <div className={`${styles['reminder-container']} ${props.show ? styles['container--show'] : ''}`}>\r\n                     <Button onClick={props.returnHandler} style={{ padding: '6px 8px 6px 0px' }}><NavigateBeforeIcon />Lists</Button> \r\n                     <h2 className={styles['reminder__todo-title']}>{props.todoList[props.reminderListIndex].title}</h2>\r\n                     {reminderList}\r\n                     {newInput}\r\n                     {addReminderFooter}\r\n              </div>\r\n       );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n       return {\r\n              todoList: state.todos\r\n       };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n       return {\r\n              onAddReminder: (reminder, index) => dispatch(actions.addReminder(reminder, index)),\r\n              // onEditReminder: (reminders, index) => dispatch(actions.editReminder(reminders, index))\r\n              onEditReminder: (id, flag, reminder, reminderListId) =>\r\n                     dispatch(actions.editReminder(id, flag, reminder, reminderListId))\r\n       };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Reminder);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styles from './Reminder.module.css';\r\n\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst ReminderSearch = props => {\r\n       const [reminderListCopy, setReminderListCopy] = useState([]);\r\n\r\n       useEffect(() => {\r\n              //   console.log(props.rList);\r\n              let rCopy = [...props.rList];\r\n              //   if (props.rList === undefined) {\r\n              //          console.log('UNDEFINED');\r\n              //          rCopy = [...props.todoList];\r\n              //   }\r\n              console.log(props.todoList);\r\n              console.log(props.rList);\r\n              setReminderListCopy(rCopy);\r\n       }, [props.todoList, props.rList]); //to remove props.todoList (or not)\r\n\r\n       const onEditReminderHandler = (id, event, todoIndex) => {\r\n              // event.preventDefault(); //not sure if needed (removed; for verification)\r\n              let reminders = [...reminderListCopy];\r\n              reminders[todoIndex].todoItems[id] = event.target.value;\r\n              console.log(reminders);\r\n              setReminderListCopy(reminders); //update state copy\r\n       };\r\n\r\n       const onSaveReminderHandler = (id, event, todoIndex) => {\r\n              // console.log(event.target.value);\r\n              //1st approach: send whole array\r\n              // let updatedReminderList = [...reminderListCopy];\r\n              // props.onEditReminder(updatedReminderList, props.reminderListIndex); //pass whole reminderlist and reminderListIndex\r\n\r\n              //2nd approach: send todoItemIndex, flag, and depending on the flag(edit or remove) will pass the value;\r\n              if (event.target.value === '') {\r\n                     props.onEditReminder(id, 'remove', null, todoIndex);\r\n                     return;\r\n              }\r\n              props.onEditReminder(id, 'edit', event.target.value, todoIndex);\r\n       };\r\n\r\n       let reminderList = <div></div>;\r\n       if (reminderListCopy.length > 0) {\r\n              let reminders = reminderListCopy;\r\n              reminderList = reminders.map((todo, index) => {\r\n                     return (\r\n                            <div key={index}>\r\n                                   <h2>{todo.title}</h2>\r\n                                   {todo.todoItems.map((reminder, reminderIndex) => {\r\n                                          return (\r\n                                                 <div key={reminderIndex}>\r\n                                                        <input className={styles.radioBtn} type=\"radio\" />\r\n                                                        <input\r\n                                                               className={styles.reminderItem}\r\n                                                               type=\"text\"\r\n                                                               id={reminderIndex}\r\n                                                               // value={item === reminderListCopy[index] ? reminderListCopy[index] : ''}\r\n                                                               value={reminder}\r\n                                                               onChange={event =>\r\n                                                                      onEditReminderHandler(reminderIndex, event, index)\r\n                                                               }\r\n                                                               onBlur={event =>\r\n                                                                      onSaveReminderHandler(reminderIndex, event, index)\r\n                                                               }\r\n                                                        />\r\n                                                 </div>\r\n                                          );\r\n                                   })}\r\n                            </div>\r\n                     );\r\n              });\r\n       }\r\n\r\n       return (\r\n              <div className={styles.reminderContainer}>\r\n                     <h1>Results for \"{props.searchVal}\"</h1>\r\n                     {reminderList}\r\n              </div>\r\n       );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n       return {\r\n              todoList: state.todos\r\n       };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n       return {\r\n              onAddReminder: (reminder, index) => dispatch(actions.addReminder(reminder, index)),\r\n              // onEditReminder: (reminders, index) => dispatch(actions.editReminder(reminders, index))\r\n              onEditReminder: (id, flag, reminder, reminderListId) =>\r\n                     dispatch(actions.editReminder(id, flag, reminder, reminderListId))\r\n       };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReminderSearch);\r\n\r\n//    if (props.todoList[props.reminderListIndex].todoItems.length > 0) {\r\n//           let reminders = reminderListCopy;\r\n//           reminderList = reminders.map((item, index) => {\r\n//                  return (\r\n//                         <div className={styles.reminderRow} key={index}>\r\n//                                <input className={styles.radioBtn} type=\"radio\" />\r\n//                                <input\r\n//                                       className={styles.reminderItem}\r\n//                                       type=\"text\"\r\n//                                       id={index}\r\n//                                       // value={item === reminderListCopy[index] ? reminderListCopy[index] : ''}\r\n//                                       value={item}\r\n//                                       onChange={event => onEditReminderHandler(index, event)}\r\n//                                       onBlur={event => onSaveReminderHandler(index, event)}\r\n//                                />\r\n//                         </div>\r\n//                  );\r\n//           });\r\n//    }\r\n","import React from 'react';\r\nimport styles from './Backdrop.module.css';\r\n\r\nconst backdrop = (props) =>\r\n  props.show ? (\r\n    <div className={styles.Backdrop} onClick={props.clicked}></div>\r\n  ) : null;\r\n\r\nexport default backdrop;\r\n","import React from 'react';\r\nimport styles from './Modal.module.css';\r\nimport Ox from '../../../hoc/Ox';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\n// import classNames from 'classnames';\r\n\r\nconst Modal = props => {\r\n       // shouldComponentUpdate(nextProps, nextState) {\r\n       //        return nextProps.show !== this.props.show || nextProps.children !== this.props.children;\r\n       // }\r\n\r\n       return (\r\n              <Ox>\r\n                     <Backdrop show={props.show} clicked={props.modalClosed} />\r\n                     <div\r\n                            className={styles.Modal}\r\n                            //  {classNames({\r\n                            //         [styles['Modal']]: true,\r\n                            //         [styles['Loading']]: props.loading\r\n                            //  })}\r\n                            style={{\r\n                                   transform: props.show ? 'translateY(0)' : 'translateY(-100vh)',\r\n                                   opacity: props.show ? '1' : '0'\r\n                            }}>\r\n                            {props.children}\r\n                     </div>\r\n              </Ox>\r\n       );\r\n};\r\n\r\nexport default React.memo(\r\n       Modal,\r\n       (prevProps, nextProps) => nextProps.show === prevProps.show && nextProps.children === prevProps.children\r\n);\r\n\r\n// const modal = (props) => (\r\n//   <Ox>\r\n//     <Backdrop show={props.show} clicked={props.modalClosed} />\r\n//     <div\r\n//       className={styles.Modal}\r\n//       style={{\r\n//         transform: props.show ? 'translateY(0)' : 'translateY(-100vh)',\r\n//         opacity: props.show ? '1' : '0'\r\n//       }}\r\n//     >\r\n//       {props.children}\r\n//     </div>\r\n//   </Ox>\r\n// );\r\n\r\n// export default modal;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { FaSearch } from 'react-icons/fa';\r\nimport { connect } from 'react-redux';\r\nimport Ox from '../../../hoc/Ox';\r\nimport * as actions from '../../../store/actions/index';\r\nimport NewList from '../../NewList/NewList';\r\nimport Reminder from '../../Reminder/Reminder';\r\nimport ReminderSearch from '../../Reminder/ReminderSearch';\r\nimport Modal from '../../UI/Modal/Modal';\r\nimport styles from './SideBar.module.scss';\r\n\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nconst SideBar = props => {\r\n       const [itemId, setItemId] = useState(0);\r\n       const [isAdding, setIsAdding] = useState(false);\r\n       const [inputFieldValue, setInputFieldValue] = useState('');\r\n       const [filteredReminders, setFilteredReminders] = useState([]);\r\n       const [isOpen, setIsOpen] = useState(false);\r\n       // const sidebarRef = useRef();\r\n\r\n       useEffect(() => {\r\n              reminderListHandler();\r\n       }, [inputFieldValue, itemId]);\r\n\r\n       const onTodoClickHandler = id => {\r\n              setItemId(id);\r\n              reminderListHandler(id);\r\n              setIsOpen(true);\r\n              // //Getting node element\r\n              // const ref = sidebarRef.current\r\n\r\n              // //Adding class to node element\r\n              // ref.classList.toggle('sidebar--hide');\r\n       };\r\n\r\n       const reminderListHandler = id => {\r\n              if (inputFieldValue) {\r\n                     let arr = searchListHandler(props.todoList, inputFieldValue);\r\n                     setFilteredReminders(arr);\r\n              }\r\n              // console.log(filteredReminders); //always delay to reflect current vlaue; would reflect on next batch update\r\n       };\r\n\r\n       const searchListHandler = (rows, filterKey) => {\r\n              return rows.filter(row => JSON.stringify(row).toLowerCase().includes(filterKey));\r\n       };\r\n\r\n       const showAddListHandler = () => {\r\n              setIsAdding(true);\r\n       };\r\n\r\n       const cancelAddListHandler = () => {\r\n              setIsAdding(false);\r\n       };\r\n\r\n       const addListHandler = text => {\r\n              props.onAddList(text);\r\n              setIsAdding(false);\r\n       };\r\n\r\n       const onReturnToListsHandler = () => {\r\n              setIsOpen(false);\r\n       };\r\n\r\n       const tdList = props.todoList.map((item, index) => {\r\n              return (\r\n                     <div\r\n                            key={index}\r\n                            className={`${styles.sidebar__listItems} ${index === itemId ? styles.active : ''}`}\r\n                            onClick={() => onTodoClickHandler(index)}>\r\n                            <div>{item.title}</div>\r\n                            <div className={styles['sidebar_listItems-count']}>{item.todoItems.length}</div>\r\n                            <NavigateNextIcon />\r\n                     </div>\r\n              );\r\n       });\r\n\r\n       const addListFooter = (\r\n              <div className={styles.footer}>\r\n                     {/* <div className={`${styles.footer} ${isOpen ? styles['footer--hide'] : \"\"}`}> */}\r\n                     <button className={styles.footer__btn} onClick={showAddListHandler}>\r\n                            Add List\r\n                     </button>\r\n              </div>\r\n       );\r\n\r\n       let reminders = <Reminder reminderListIndex={itemId} show={isOpen} returnHandler={onReturnToListsHandler} />;\r\n       if (inputFieldValue) {\r\n              reminders = (\r\n                     <ReminderSearch\r\n                            rList={filteredReminders}\r\n                            searchVal={inputFieldValue}\r\n                            show={isOpen}\r\n                            returnHandler={onReturnToListsHandler}\r\n                     />\r\n              );\r\n       }\r\n\r\n       const modal = (\r\n              <Modal show={isAdding} modalClosed={cancelAddListHandler}>\r\n                     <NewList addListCancelled={cancelAddListHandler} addNewList={addListHandler} />\r\n              </Modal>\r\n       );\r\n\r\n       return (\r\n              <Ox>\r\n                     <div className={styles.sidebar}>\r\n                            {/* <div className={`${styles.sidebar} ${isOpen ? styles['sidebar--hide'] : \"\"}`}> */}\r\n                            <div className={styles.sidebar__search}>\r\n                                   <FaSearch className={styles.sidebar__icon}></FaSearch>\r\n                                   <input\r\n                                          className={styles.sidebar__searchbox}\r\n                                          placeholder=\"Search\"\r\n                                          value={inputFieldValue}\r\n                                          onChange={e => setInputFieldValue(e.target.value)}\r\n                                   />\r\n                            </div>\r\n                            <h3 className={styles.sidebar__label}>My Lists</h3>\r\n                            {tdList}\r\n                     </div>\r\n                     {addListFooter}\r\n                     {reminders}\r\n                     {isAdding ? modal : null}\r\n              </Ox>\r\n       );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n       return {\r\n              todoList: state.todos\r\n       };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n       return {\r\n              onAddList: title => dispatch(actions.addList(title))\r\n       };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SideBar);\r\n\r\n// const addNewReminderHandler = reminder => {\r\n//        if (reminder === '') {\r\n//               return;\r\n//        }\r\n\r\n//        let updatedList = props.todoList.todos.map((arr, index) => {\r\n//               console.log(reminder);\r\n//               console.log(itemId);\r\n//               if (index === itemId) {\r\n//                      arr.todoItems.push(reminder);\r\n//               }\r\n//               return arr;\r\n//        });\r\n\r\n//        let newTodo = { todos: updatedList };\r\n//        // setTdList(newTodo);\r\n// };\r\n\r\n// const inputChangedHandler = (event, item, index) => {\r\n//        // console.log(event.target.value);\r\n//        // setEditItemStr(event.target.value);\r\n//        // setReminderItem(reminderItem[index]);\r\n// };\r\n\r\n// const editReminderHandler = index => {\r\n//        //loop through array todoItems\r\n//        // console.log(index);\r\n//        // console.log(index.nativeEvent.data);\r\n//        // console.log(index.target.defaultValue);\r\n//        // console.log(index.target.id);\r\n//        // console.log(index.key);\r\n//        if (props.todoList.todos[itemId][index.target.id] === index.target.defaultValue) {\r\n//               return '';\r\n//        }\r\n\r\n//        //look for reminder in todos[itemId]\r\n//        if (index.nativeEvent.data == null) {\r\n//               console.log(index);\r\n//        }\r\n//        let newVal = index.target.defaultValue.concat(index.nativeEvent.data);\r\n//        let updatedReminderList = props.todoList.todos[itemId].todoItems.splice([index.target.id], 1, newVal);\r\n\r\n//        let updatedList = props.todoList.todos.splice([itemId], 1, updatedReminderList);\r\n//        console.log(updatedList);\r\n//        let newTodo = { todos: updatedList };\r\n//        console.log(newTodo);\r\n//        // setTdList(newTodo);\r\n// };\r\n\r\n// const addListHandler = title => {\r\n//        const newList = { title: title, todoItems: [] };\r\n//        const arrayCopy = [...props.todoList.todos];\r\n//        arrayCopy.push(newList);\r\n//        let newTodo = { todos: arrayCopy };\r\n//        setIsAdding(false);\r\n//        // setTdList(prevList => [...prevList.todos, newList]);\r\n// };\r\n","import React from 'react';\r\nimport styles from './Layout.module.css';\r\n\r\nimport SideBar from '../Navigation/SideBar/SideBar';\r\n// import Reminder from '../Reminder/Reminder';\r\n\r\nconst Layout = props => {\r\n       return (\r\n              <div className={styles.Layout}>\r\n                     <SideBar></SideBar>\r\n              </div>\r\n       );\r\n};\r\n\r\nexport default Layout;\r\n","import React from 'react';\nimport './App.css';\nimport Layout from './components/Layout/Layout';\n\nconst App = props => {\n       return (\n              <div className=\"App\">\n                     <Layout />\n              </div>\n       );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const updatedObject = (oldObject, updatedProperties) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedProperties\r\n  };\r\n};\r\n","import * as actionType from '../actions/actionTypes';\r\nimport { updatedObject } from '../utility';\r\n\r\nconst initialState = {\r\n       todos: [\r\n              {\r\n                     title: 'day to day',\r\n                     todoItems: ['exercise', 'bfast/ligo', 'check jobs']\r\n              },\r\n              {\r\n                     title: 'app ideas',\r\n                     todoItems: ['gps tracker']\r\n              },\r\n              {\r\n                     title: 'day to day',\r\n                     todoItems: ['exercise', 'bfast/ligo', 'check jobs']\r\n              },\r\n              {\r\n                     title: 'app ideas',\r\n                     todoItems: ['gps tracker']\r\n              },{\r\n                     title: 'day to day',\r\n                     todoItems: ['exercise', 'bfast/ligo', 'check jobs']\r\n              },\r\n              {\r\n                     title: 'app ideas',\r\n                     todoItems: ['gps tracker']\r\n              },{\r\n                     title: 'day to day',\r\n                     todoItems: ['exercise', 'bfast/ligo', 'check jobs']\r\n              },\r\n              {\r\n                     title: 'app ideas',\r\n                     todoItems: ['gps tracker']\r\n              },{\r\n                     title: 'day to day',\r\n                     todoItems: ['exercise', 'bfast/ligo', 'check jobs']\r\n              },\r\n              {\r\n                     title: 'app ideas',\r\n                     todoItems: ['gps tracker']\r\n              },{\r\n                     title: 'day to end 1',\r\n                     todoItems: ['exercise', 'bfast/ligo', 'check jobs']\r\n              },\r\n              {\r\n                     title: 'app ideas',\r\n                     todoItems: ['gps tracker']\r\n              },\r\n              {\r\n                     title: 'day end',\r\n                     todoItems: ['exercise', 'bfast/ligo', 'check jobs']\r\n              },\r\n              {\r\n                     title: 'app ideas',\r\n                     todoItems: ['gps tracker']\r\n              }\r\n       ]\r\n};\r\nconst setToDoList = (state, action) => {\r\n       return updatedObject(state, {\r\n              todoList: {\r\n                     title: action.todoList.title,\r\n                     todos: action.todoList\r\n              }\r\n       });\r\n};\r\n\r\nconst addReminder = (state, action) => {\r\n       let updatedTodos = state.todos.map((arr, index) => {\r\n              if (index === action.todoListIndex) {\r\n                     arr.todoItems.push(action.reminderContent);\r\n              }\r\n              return arr;\r\n       });\r\n\r\n       const updatedState = {\r\n              todos: updatedTodos\r\n       };\r\n       return updatedObject(state, updatedState);\r\n};\r\n\r\nconst editReminder = (state, action) => {\r\n       //1st approach\r\n       // const todosCopy = [...state.todos];\r\n       // let updatedReminder = { ...todosCopy[action.reminderListId] };\r\n       // let updatedTodoItems = [...updatedReminder.todoItems];\r\n       // updatedTodoItems = action.todoItems;\r\n       // updatedReminder.todoItems = updatedTodoItems;\r\n       // todosCopy[action.reminderListId] = updatedReminder;\r\n       // const updatedState = { todos: todosCopy };\r\n\r\n       //2nd approach\r\n       const todosCopy = [...state.todos];\r\n       let updatedReminder = { ...todosCopy[action.reminderListId] };\r\n       let updatedTodoItems = [...updatedReminder.todoItems];\r\n       if (action.flag === 'remove') {\r\n              updatedTodoItems.splice(action.reminderId, 1);\r\n              console.log(updatedTodoItems);\r\n       } else if (action.flag === 'edit') {\r\n              updatedTodoItems.splice(action.reminderId, 1, action.content);\r\n              console.log(updatedTodoItems);\r\n       }\r\n       updatedReminder.todoItems = updatedTodoItems;\r\n       todosCopy[action.reminderListId] = updatedReminder;\r\n       const updatedState = { todos: todosCopy };\r\n       console.log(updatedState);\r\n       return updatedObject(state, updatedState);\r\n};\r\n\r\nconst addList = (state, action) => {\r\n       const newList = { title: action.listTitle, todoItems: [] };\r\n       const arrayCopy = [...state.todos];\r\n       arrayCopy.push(newList);\r\n       const updatedState = { todos: arrayCopy };\r\n       console.log(updatedState);\r\n       return updatedObject(state, updatedState);\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n       switch (action.type) {\r\n              case actionType.ADD_REMINDER:\r\n                     return addReminder(state, action);\r\n              case actionType.EDIT_REMINDER:\r\n                     return editReminder(state, action);\r\n              case actionType.ADD_LIST:\r\n                     return addList(state, action);\r\n              case actionType.SET_TODO_LIST:\r\n                     return setToDoList(state, action);\r\n              default:\r\n                     return state;\r\n       }\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport todoReducer from './store/reducers/todoList';\n\nconst store = createStore(todoReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nconsole.log(store.getState());\nconst app = (\n       <Provider store={store}>\n              <App />\n       </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log());\n"],"sourceRoot":""}